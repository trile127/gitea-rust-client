/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreatePullReviewComment : CreatePullReviewComment represent a review comment for creation api

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreatePullReviewComment {
  #[serde(rename = "body")]
  body: Option<String>,
  /// if comment to new file line or 0
  #[serde(rename = "new_position")]
  new_position: Option<i64>,
  /// if comment to old file line or 0
  #[serde(rename = "old_position")]
  old_position: Option<i64>,
  /// the tree path
  #[serde(rename = "path")]
  path: Option<String>
}

impl CreatePullReviewComment {
  /// CreatePullReviewComment represent a review comment for creation api
  pub fn new() -> CreatePullReviewComment {
    CreatePullReviewComment {
      body: None,
      new_position: None,
      old_position: None,
      path: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> CreatePullReviewComment {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_new_position(&mut self, new_position: i64) {
    self.new_position = Some(new_position);
  }

  pub fn with_new_position(mut self, new_position: i64) -> CreatePullReviewComment {
    self.new_position = Some(new_position);
    self
  }

  pub fn new_position(&self) -> Option<&i64> {
    self.new_position.as_ref()
  }

  pub fn reset_new_position(&mut self) {
    self.new_position = None;
  }

  pub fn set_old_position(&mut self, old_position: i64) {
    self.old_position = Some(old_position);
  }

  pub fn with_old_position(mut self, old_position: i64) -> CreatePullReviewComment {
    self.old_position = Some(old_position);
    self
  }

  pub fn old_position(&self) -> Option<&i64> {
    self.old_position.as_ref()
  }

  pub fn reset_old_position(&mut self) {
    self.old_position = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> CreatePullReviewComment {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

}



