/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RepoCollaboratorPermission : RepoCollaboratorPermission to get repository permission for a collaborator

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepoCollaboratorPermission {
  #[serde(rename = "permission")]
  permission: Option<String>,
  #[serde(rename = "role_name")]
  role_name: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::User>
}

impl RepoCollaboratorPermission {
  /// RepoCollaboratorPermission to get repository permission for a collaborator
  pub fn new() -> RepoCollaboratorPermission {
    RepoCollaboratorPermission {
      permission: None,
      role_name: None,
      user: None
    }
  }

  pub fn set_permission(&mut self, permission: String) {
    self.permission = Some(permission);
  }

  pub fn with_permission(mut self, permission: String) -> RepoCollaboratorPermission {
    self.permission = Some(permission);
    self
  }

  pub fn permission(&self) -> Option<&String> {
    self.permission.as_ref()
  }

  pub fn reset_permission(&mut self) {
    self.permission = None;
  }

  pub fn set_role_name(&mut self, role_name: String) {
    self.role_name = Some(role_name);
  }

  pub fn with_role_name(mut self, role_name: String) -> RepoCollaboratorPermission {
    self.role_name = Some(role_name);
    self
  }

  pub fn role_name(&self) -> Option<&String> {
    self.role_name.as_ref()
  }

  pub fn reset_role_name(&mut self) {
    self.role_name = None;
  }

  pub fn set_user(&mut self, user: ::models::User) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::User) -> RepoCollaboratorPermission {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::User> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



