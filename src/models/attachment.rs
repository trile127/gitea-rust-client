/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Attachment : Attachment a generic attachment

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Attachment {
  #[serde(rename = "browser_download_url")]
  browser_download_url: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "download_count")]
  download_count: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "size")]
  size: Option<i64>,
  #[serde(rename = "uuid")]
  uuid: Option<String>
}

impl Attachment {
  /// Attachment a generic attachment
  pub fn new() -> Attachment {
    Attachment {
      browser_download_url: None,
      created_at: None,
      download_count: None,
      id: None,
      name: None,
      size: None,
      uuid: None
    }
  }

  pub fn set_browser_download_url(&mut self, browser_download_url: String) {
    self.browser_download_url = Some(browser_download_url);
  }

  pub fn with_browser_download_url(mut self, browser_download_url: String) -> Attachment {
    self.browser_download_url = Some(browser_download_url);
    self
  }

  pub fn browser_download_url(&self) -> Option<&String> {
    self.browser_download_url.as_ref()
  }

  pub fn reset_browser_download_url(&mut self) {
    self.browser_download_url = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Attachment {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_download_count(&mut self, download_count: i64) {
    self.download_count = Some(download_count);
  }

  pub fn with_download_count(mut self, download_count: i64) -> Attachment {
    self.download_count = Some(download_count);
    self
  }

  pub fn download_count(&self) -> Option<&i64> {
    self.download_count.as_ref()
  }

  pub fn reset_download_count(&mut self) {
    self.download_count = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> Attachment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Attachment {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_size(&mut self, size: i64) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i64) -> Attachment {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i64> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_uuid(&mut self, uuid: String) {
    self.uuid = Some(uuid);
  }

  pub fn with_uuid(mut self, uuid: String) -> Attachment {
    self.uuid = Some(uuid);
    self
  }

  pub fn uuid(&self) -> Option<&String> {
    self.uuid.as_ref()
  }

  pub fn reset_uuid(&mut self) {
    self.uuid = None;
  }

}



