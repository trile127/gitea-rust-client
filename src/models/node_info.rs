/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeInfo : NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeInfo {
  #[serde(rename = "metadata")]
  metadata: Option<Value>,
  #[serde(rename = "openRegistrations")]
  open_registrations: Option<bool>,
  #[serde(rename = "protocols")]
  protocols: Option<Vec<String>>,
  #[serde(rename = "services")]
  services: Option<::models::NodeInfoServices>,
  #[serde(rename = "software")]
  software: Option<::models::NodeInfoSoftware>,
  #[serde(rename = "usage")]
  usage: Option<::models::NodeInfoUsage>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl NodeInfo {
  /// NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
  pub fn new() -> NodeInfo {
    NodeInfo {
      metadata: None,
      open_registrations: None,
      protocols: None,
      services: None,
      software: None,
      usage: None,
      version: None
    }
  }

  pub fn set_metadata(&mut self, metadata: Value) {
    self.metadata = Some(metadata);
  }

  pub fn with_metadata(mut self, metadata: Value) -> NodeInfo {
    self.metadata = Some(metadata);
    self
  }

  pub fn metadata(&self) -> Option<&Value> {
    self.metadata.as_ref()
  }

  pub fn reset_metadata(&mut self) {
    self.metadata = None;
  }

  pub fn set_open_registrations(&mut self, open_registrations: bool) {
    self.open_registrations = Some(open_registrations);
  }

  pub fn with_open_registrations(mut self, open_registrations: bool) -> NodeInfo {
    self.open_registrations = Some(open_registrations);
    self
  }

  pub fn open_registrations(&self) -> Option<&bool> {
    self.open_registrations.as_ref()
  }

  pub fn reset_open_registrations(&mut self) {
    self.open_registrations = None;
  }

  pub fn set_protocols(&mut self, protocols: Vec<String>) {
    self.protocols = Some(protocols);
  }

  pub fn with_protocols(mut self, protocols: Vec<String>) -> NodeInfo {
    self.protocols = Some(protocols);
    self
  }

  pub fn protocols(&self) -> Option<&Vec<String>> {
    self.protocols.as_ref()
  }

  pub fn reset_protocols(&mut self) {
    self.protocols = None;
  }

  pub fn set_services(&mut self, services: ::models::NodeInfoServices) {
    self.services = Some(services);
  }

  pub fn with_services(mut self, services: ::models::NodeInfoServices) -> NodeInfo {
    self.services = Some(services);
    self
  }

  pub fn services(&self) -> Option<&::models::NodeInfoServices> {
    self.services.as_ref()
  }

  pub fn reset_services(&mut self) {
    self.services = None;
  }

  pub fn set_software(&mut self, software: ::models::NodeInfoSoftware) {
    self.software = Some(software);
  }

  pub fn with_software(mut self, software: ::models::NodeInfoSoftware) -> NodeInfo {
    self.software = Some(software);
    self
  }

  pub fn software(&self) -> Option<&::models::NodeInfoSoftware> {
    self.software.as_ref()
  }

  pub fn reset_software(&mut self) {
    self.software = None;
  }

  pub fn set_usage(&mut self, usage: ::models::NodeInfoUsage) {
    self.usage = Some(usage);
  }

  pub fn with_usage(mut self, usage: ::models::NodeInfoUsage) -> NodeInfo {
    self.usage = Some(usage);
    self
  }

  pub fn usage(&self) -> Option<&::models::NodeInfoUsage> {
    self.usage.as_ref()
  }

  pub fn reset_usage(&mut self) {
    self.usage = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> NodeInfo {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



