/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ChangeFilesOptions : ChangeFilesOptions options for creating, updating or deleting multiple files Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChangeFilesOptions {
  #[serde(rename = "author")]
  author: Option<::models::Identity>,
  /// branch (optional) to base this file from. if not given, the default branch is used
  #[serde(rename = "branch")]
  branch: Option<String>,
  #[serde(rename = "committer")]
  committer: Option<::models::Identity>,
  #[serde(rename = "dates")]
  dates: Option<::models::CommitDateOptions>,
  /// list of file operations
  #[serde(rename = "files")]
  files: Vec<::models::ChangeFileOperation>,
  /// message (optional) for the commit of this file. if not supplied, a default message will be used
  #[serde(rename = "message")]
  message: Option<String>,
  /// new_branch (optional) will make a new branch from `branch` before creating the file
  #[serde(rename = "new_branch")]
  new_branch: Option<String>,
  /// Add a Signed-off-by trailer by the committer at the end of the commit log message.
  #[serde(rename = "signoff")]
  signoff: Option<bool>
}

impl ChangeFilesOptions {
  /// ChangeFilesOptions options for creating, updating or deleting multiple files Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
  pub fn new(files: Vec<::models::ChangeFileOperation>) -> ChangeFilesOptions {
    ChangeFilesOptions {
      author: None,
      branch: None,
      committer: None,
      dates: None,
      files: files,
      message: None,
      new_branch: None,
      signoff: None
    }
  }

  pub fn set_author(&mut self, author: ::models::Identity) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::Identity) -> ChangeFilesOptions {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::Identity> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_branch(&mut self, branch: String) {
    self.branch = Some(branch);
  }

  pub fn with_branch(mut self, branch: String) -> ChangeFilesOptions {
    self.branch = Some(branch);
    self
  }

  pub fn branch(&self) -> Option<&String> {
    self.branch.as_ref()
  }

  pub fn reset_branch(&mut self) {
    self.branch = None;
  }

  pub fn set_committer(&mut self, committer: ::models::Identity) {
    self.committer = Some(committer);
  }

  pub fn with_committer(mut self, committer: ::models::Identity) -> ChangeFilesOptions {
    self.committer = Some(committer);
    self
  }

  pub fn committer(&self) -> Option<&::models::Identity> {
    self.committer.as_ref()
  }

  pub fn reset_committer(&mut self) {
    self.committer = None;
  }

  pub fn set_dates(&mut self, dates: ::models::CommitDateOptions) {
    self.dates = Some(dates);
  }

  pub fn with_dates(mut self, dates: ::models::CommitDateOptions) -> ChangeFilesOptions {
    self.dates = Some(dates);
    self
  }

  pub fn dates(&self) -> Option<&::models::CommitDateOptions> {
    self.dates.as_ref()
  }

  pub fn reset_dates(&mut self) {
    self.dates = None;
  }

  pub fn set_files(&mut self, files: Vec<::models::ChangeFileOperation>) {
    self.files = files;
  }

  pub fn with_files(mut self, files: Vec<::models::ChangeFileOperation>) -> ChangeFilesOptions {
    self.files = files;
    self
  }

  pub fn files(&self) -> &Vec<::models::ChangeFileOperation> {
    &self.files
  }


  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> ChangeFilesOptions {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_new_branch(&mut self, new_branch: String) {
    self.new_branch = Some(new_branch);
  }

  pub fn with_new_branch(mut self, new_branch: String) -> ChangeFilesOptions {
    self.new_branch = Some(new_branch);
    self
  }

  pub fn new_branch(&self) -> Option<&String> {
    self.new_branch.as_ref()
  }

  pub fn reset_new_branch(&mut self) {
    self.new_branch = None;
  }

  pub fn set_signoff(&mut self, signoff: bool) {
    self.signoff = Some(signoff);
  }

  pub fn with_signoff(mut self, signoff: bool) -> ChangeFilesOptions {
    self.signoff = Some(signoff);
    self
  }

  pub fn signoff(&self) -> Option<&bool> {
    self.signoff.as_ref()
  }

  pub fn reset_signoff(&mut self) {
    self.signoff = None;
  }

}



