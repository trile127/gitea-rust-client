/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// MarkupOption : MarkupOption markup options

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MarkupOption {
  /// Context to render  in: body
  #[serde(rename = "Context")]
  context: Option<String>,
  /// File path for detecting extension in file mode  in: body
  #[serde(rename = "FilePath")]
  file_path: Option<String>,
  /// Mode to render (comment, gfm, markdown, file)  in: body
  #[serde(rename = "Mode")]
  mode: Option<String>,
  /// Text markup to render  in: body
  #[serde(rename = "Text")]
  text: Option<String>,
  /// Is it a wiki page ?  in: body
  #[serde(rename = "Wiki")]
  wiki: Option<bool>
}

impl MarkupOption {
  /// MarkupOption markup options
  pub fn new() -> MarkupOption {
    MarkupOption {
      context: None,
      file_path: None,
      mode: None,
      text: None,
      wiki: None
    }
  }

  pub fn set_context(&mut self, context: String) {
    self.context = Some(context);
  }

  pub fn with_context(mut self, context: String) -> MarkupOption {
    self.context = Some(context);
    self
  }

  pub fn context(&self) -> Option<&String> {
    self.context.as_ref()
  }

  pub fn reset_context(&mut self) {
    self.context = None;
  }

  pub fn set_file_path(&mut self, file_path: String) {
    self.file_path = Some(file_path);
  }

  pub fn with_file_path(mut self, file_path: String) -> MarkupOption {
    self.file_path = Some(file_path);
    self
  }

  pub fn file_path(&self) -> Option<&String> {
    self.file_path.as_ref()
  }

  pub fn reset_file_path(&mut self) {
    self.file_path = None;
  }

  pub fn set_mode(&mut self, mode: String) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: String) -> MarkupOption {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&String> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = Some(text);
  }

  pub fn with_text(mut self, text: String) -> MarkupOption {
    self.text = Some(text);
    self
  }

  pub fn text(&self) -> Option<&String> {
    self.text.as_ref()
  }

  pub fn reset_text(&mut self) {
    self.text = None;
  }

  pub fn set_wiki(&mut self, wiki: bool) {
    self.wiki = Some(wiki);
  }

  pub fn with_wiki(mut self, wiki: bool) -> MarkupOption {
    self.wiki = Some(wiki);
    self
  }

  pub fn wiki(&self) -> Option<&bool> {
    self.wiki.as_ref()
  }

  pub fn reset_wiki(&mut self) {
    self.wiki = None;
  }

}



