/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IssueConfigValidation {
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "valid")]
  valid: Option<bool>
}

impl IssueConfigValidation {
  pub fn new() -> IssueConfigValidation {
    IssueConfigValidation {
      message: None,
      valid: None
    }
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> IssueConfigValidation {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_valid(&mut self, valid: bool) {
    self.valid = Some(valid);
  }

  pub fn with_valid(mut self, valid: bool) -> IssueConfigValidation {
    self.valid = Some(valid);
    self
  }

  pub fn valid(&self) -> Option<&bool> {
    self.valid.as_ref()
  }

  pub fn reset_valid(&mut self) {
    self.valid = None;
  }

}



