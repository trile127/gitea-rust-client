/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// EditIssueOption : EditIssueOption options for editing an issue

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EditIssueOption {
  /// deprecated
  #[serde(rename = "assignee")]
  assignee: Option<String>,
  #[serde(rename = "assignees")]
  assignees: Option<Vec<String>>,
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "due_date")]
  due_date: Option<String>,
  #[serde(rename = "milestone")]
  milestone: Option<i64>,
  #[serde(rename = "ref")]
  _ref: Option<String>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "unset_due_date")]
  unset_due_date: Option<bool>
}

impl EditIssueOption {
  /// EditIssueOption options for editing an issue
  pub fn new() -> EditIssueOption {
    EditIssueOption {
      assignee: None,
      assignees: None,
      body: None,
      due_date: None,
      milestone: None,
      _ref: None,
      state: None,
      title: None,
      unset_due_date: None
    }
  }

  pub fn set_assignee(&mut self, assignee: String) {
    self.assignee = Some(assignee);
  }

  pub fn with_assignee(mut self, assignee: String) -> EditIssueOption {
    self.assignee = Some(assignee);
    self
  }

  pub fn assignee(&self) -> Option<&String> {
    self.assignee.as_ref()
  }

  pub fn reset_assignee(&mut self) {
    self.assignee = None;
  }

  pub fn set_assignees(&mut self, assignees: Vec<String>) {
    self.assignees = Some(assignees);
  }

  pub fn with_assignees(mut self, assignees: Vec<String>) -> EditIssueOption {
    self.assignees = Some(assignees);
    self
  }

  pub fn assignees(&self) -> Option<&Vec<String>> {
    self.assignees.as_ref()
  }

  pub fn reset_assignees(&mut self) {
    self.assignees = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> EditIssueOption {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_due_date(&mut self, due_date: String) {
    self.due_date = Some(due_date);
  }

  pub fn with_due_date(mut self, due_date: String) -> EditIssueOption {
    self.due_date = Some(due_date);
    self
  }

  pub fn due_date(&self) -> Option<&String> {
    self.due_date.as_ref()
  }

  pub fn reset_due_date(&mut self) {
    self.due_date = None;
  }

  pub fn set_milestone(&mut self, milestone: i64) {
    self.milestone = Some(milestone);
  }

  pub fn with_milestone(mut self, milestone: i64) -> EditIssueOption {
    self.milestone = Some(milestone);
    self
  }

  pub fn milestone(&self) -> Option<&i64> {
    self.milestone.as_ref()
  }

  pub fn reset_milestone(&mut self) {
    self.milestone = None;
  }

  pub fn set__ref(&mut self, _ref: String) {
    self._ref = Some(_ref);
  }

  pub fn with__ref(mut self, _ref: String) -> EditIssueOption {
    self._ref = Some(_ref);
    self
  }

  pub fn _ref(&self) -> Option<&String> {
    self._ref.as_ref()
  }

  pub fn reset__ref(&mut self) {
    self._ref = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> EditIssueOption {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> EditIssueOption {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_unset_due_date(&mut self, unset_due_date: bool) {
    self.unset_due_date = Some(unset_due_date);
  }

  pub fn with_unset_due_date(mut self, unset_due_date: bool) -> EditIssueOption {
    self.unset_due_date = Some(unset_due_date);
    self
  }

  pub fn unset_due_date(&self) -> Option<&bool> {
    self.unset_due_date.as_ref()
  }

  pub fn reset_unset_due_date(&mut self) {
    self.unset_due_date = None;
  }

}



