/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreatePushMirrorOption {
  #[serde(rename = "interval")]
  interval: Option<String>,
  #[serde(rename = "remote_address")]
  remote_address: Option<String>,
  #[serde(rename = "remote_password")]
  remote_password: Option<String>,
  #[serde(rename = "remote_username")]
  remote_username: Option<String>,
  #[serde(rename = "sync_on_commit")]
  sync_on_commit: Option<bool>
}

impl CreatePushMirrorOption {
  pub fn new() -> CreatePushMirrorOption {
    CreatePushMirrorOption {
      interval: None,
      remote_address: None,
      remote_password: None,
      remote_username: None,
      sync_on_commit: None
    }
  }

  pub fn set_interval(&mut self, interval: String) {
    self.interval = Some(interval);
  }

  pub fn with_interval(mut self, interval: String) -> CreatePushMirrorOption {
    self.interval = Some(interval);
    self
  }

  pub fn interval(&self) -> Option<&String> {
    self.interval.as_ref()
  }

  pub fn reset_interval(&mut self) {
    self.interval = None;
  }

  pub fn set_remote_address(&mut self, remote_address: String) {
    self.remote_address = Some(remote_address);
  }

  pub fn with_remote_address(mut self, remote_address: String) -> CreatePushMirrorOption {
    self.remote_address = Some(remote_address);
    self
  }

  pub fn remote_address(&self) -> Option<&String> {
    self.remote_address.as_ref()
  }

  pub fn reset_remote_address(&mut self) {
    self.remote_address = None;
  }

  pub fn set_remote_password(&mut self, remote_password: String) {
    self.remote_password = Some(remote_password);
  }

  pub fn with_remote_password(mut self, remote_password: String) -> CreatePushMirrorOption {
    self.remote_password = Some(remote_password);
    self
  }

  pub fn remote_password(&self) -> Option<&String> {
    self.remote_password.as_ref()
  }

  pub fn reset_remote_password(&mut self) {
    self.remote_password = None;
  }

  pub fn set_remote_username(&mut self, remote_username: String) {
    self.remote_username = Some(remote_username);
  }

  pub fn with_remote_username(mut self, remote_username: String) -> CreatePushMirrorOption {
    self.remote_username = Some(remote_username);
    self
  }

  pub fn remote_username(&self) -> Option<&String> {
    self.remote_username.as_ref()
  }

  pub fn reset_remote_username(&mut self) {
    self.remote_username = None;
  }

  pub fn set_sync_on_commit(&mut self, sync_on_commit: bool) {
    self.sync_on_commit = Some(sync_on_commit);
  }

  pub fn with_sync_on_commit(mut self, sync_on_commit: bool) -> CreatePushMirrorOption {
    self.sync_on_commit = Some(sync_on_commit);
    self
  }

  pub fn sync_on_commit(&self) -> Option<&bool> {
    self.sync_on_commit.as_ref()
  }

  pub fn reset_sync_on_commit(&mut self) {
    self.sync_on_commit = None;
  }

}



