/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Repository : Repository represents a repository

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Repository {
  #[serde(rename = "allow_merge_commits")]
  allow_merge_commits: Option<bool>,
  #[serde(rename = "allow_rebase")]
  allow_rebase: Option<bool>,
  #[serde(rename = "allow_rebase_explicit")]
  allow_rebase_explicit: Option<bool>,
  #[serde(rename = "allow_rebase_update")]
  allow_rebase_update: Option<bool>,
  #[serde(rename = "allow_squash_merge")]
  allow_squash_merge: Option<bool>,
  #[serde(rename = "archived")]
  archived: Option<bool>,
  #[serde(rename = "archived_at")]
  archived_at: Option<String>,
  #[serde(rename = "avatar_url")]
  avatar_url: Option<String>,
  #[serde(rename = "clone_url")]
  clone_url: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "default_allow_maintainer_edit")]
  default_allow_maintainer_edit: Option<bool>,
  #[serde(rename = "default_branch")]
  default_branch: Option<String>,
  #[serde(rename = "default_delete_branch_after_merge")]
  default_delete_branch_after_merge: Option<bool>,
  #[serde(rename = "default_merge_style")]
  default_merge_style: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "empty")]
  empty: Option<bool>,
  #[serde(rename = "external_tracker")]
  external_tracker: Option<::models::ExternalTracker>,
  #[serde(rename = "external_wiki")]
  external_wiki: Option<::models::ExternalWiki>,
  #[serde(rename = "fork")]
  fork: Option<bool>,
  #[serde(rename = "forks_count")]
  forks_count: Option<i64>,
  #[serde(rename = "full_name")]
  full_name: Option<String>,
  #[serde(rename = "has_actions")]
  has_actions: Option<bool>,
  #[serde(rename = "has_issues")]
  has_issues: Option<bool>,
  #[serde(rename = "has_packages")]
  has_packages: Option<bool>,
  #[serde(rename = "has_projects")]
  has_projects: Option<bool>,
  #[serde(rename = "has_pull_requests")]
  has_pull_requests: Option<bool>,
  #[serde(rename = "has_releases")]
  has_releases: Option<bool>,
  #[serde(rename = "has_wiki")]
  has_wiki: Option<bool>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "ignore_whitespace_conflicts")]
  ignore_whitespace_conflicts: Option<bool>,
  #[serde(rename = "internal")]
  internal: Option<bool>,
  #[serde(rename = "internal_tracker")]
  internal_tracker: Option<::models::InternalTracker>,
  #[serde(rename = "language")]
  language: Option<String>,
  #[serde(rename = "languages_url")]
  languages_url: Option<String>,
  #[serde(rename = "link")]
  link: Option<String>,
  #[serde(rename = "mirror")]
  mirror: Option<bool>,
  #[serde(rename = "mirror_interval")]
  mirror_interval: Option<String>,
  #[serde(rename = "mirror_updated")]
  mirror_updated: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "open_issues_count")]
  open_issues_count: Option<i64>,
  #[serde(rename = "open_pr_counter")]
  open_pr_counter: Option<i64>,
  #[serde(rename = "original_url")]
  original_url: Option<String>,
  #[serde(rename = "owner")]
  owner: Option<::models::User>,
  #[serde(rename = "parent")]
  parent: Option<::models::Repository>,
  #[serde(rename = "permissions")]
  permissions: Option<::models::Permission>,
  #[serde(rename = "private")]
  private: Option<bool>,
  #[serde(rename = "release_counter")]
  release_counter: Option<i64>,
  #[serde(rename = "repo_transfer")]
  repo_transfer: Option<::models::RepoTransfer>,
  #[serde(rename = "size")]
  size: Option<i64>,
  #[serde(rename = "ssh_url")]
  ssh_url: Option<String>,
  #[serde(rename = "stars_count")]
  stars_count: Option<i64>,
  #[serde(rename = "template")]
  template: Option<bool>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "watchers_count")]
  watchers_count: Option<i64>,
  #[serde(rename = "website")]
  website: Option<String>
}

impl Repository {
  /// Repository represents a repository
  pub fn new() -> Repository {
    Repository {
      allow_merge_commits: None,
      allow_rebase: None,
      allow_rebase_explicit: None,
      allow_rebase_update: None,
      allow_squash_merge: None,
      archived: None,
      archived_at: None,
      avatar_url: None,
      clone_url: None,
      created_at: None,
      default_allow_maintainer_edit: None,
      default_branch: None,
      default_delete_branch_after_merge: None,
      default_merge_style: None,
      description: None,
      empty: None,
      external_tracker: None,
      external_wiki: None,
      fork: None,
      forks_count: None,
      full_name: None,
      has_actions: None,
      has_issues: None,
      has_packages: None,
      has_projects: None,
      has_pull_requests: None,
      has_releases: None,
      has_wiki: None,
      html_url: None,
      id: None,
      ignore_whitespace_conflicts: None,
      internal: None,
      internal_tracker: None,
      language: None,
      languages_url: None,
      link: None,
      mirror: None,
      mirror_interval: None,
      mirror_updated: None,
      name: None,
      open_issues_count: None,
      open_pr_counter: None,
      original_url: None,
      owner: None,
      parent: None,
      permissions: None,
      private: None,
      release_counter: None,
      repo_transfer: None,
      size: None,
      ssh_url: None,
      stars_count: None,
      template: None,
      updated_at: None,
      url: None,
      watchers_count: None,
      website: None
    }
  }

  pub fn set_allow_merge_commits(&mut self, allow_merge_commits: bool) {
    self.allow_merge_commits = Some(allow_merge_commits);
  }

  pub fn with_allow_merge_commits(mut self, allow_merge_commits: bool) -> Repository {
    self.allow_merge_commits = Some(allow_merge_commits);
    self
  }

  pub fn allow_merge_commits(&self) -> Option<&bool> {
    self.allow_merge_commits.as_ref()
  }

  pub fn reset_allow_merge_commits(&mut self) {
    self.allow_merge_commits = None;
  }

  pub fn set_allow_rebase(&mut self, allow_rebase: bool) {
    self.allow_rebase = Some(allow_rebase);
  }

  pub fn with_allow_rebase(mut self, allow_rebase: bool) -> Repository {
    self.allow_rebase = Some(allow_rebase);
    self
  }

  pub fn allow_rebase(&self) -> Option<&bool> {
    self.allow_rebase.as_ref()
  }

  pub fn reset_allow_rebase(&mut self) {
    self.allow_rebase = None;
  }

  pub fn set_allow_rebase_explicit(&mut self, allow_rebase_explicit: bool) {
    self.allow_rebase_explicit = Some(allow_rebase_explicit);
  }

  pub fn with_allow_rebase_explicit(mut self, allow_rebase_explicit: bool) -> Repository {
    self.allow_rebase_explicit = Some(allow_rebase_explicit);
    self
  }

  pub fn allow_rebase_explicit(&self) -> Option<&bool> {
    self.allow_rebase_explicit.as_ref()
  }

  pub fn reset_allow_rebase_explicit(&mut self) {
    self.allow_rebase_explicit = None;
  }

  pub fn set_allow_rebase_update(&mut self, allow_rebase_update: bool) {
    self.allow_rebase_update = Some(allow_rebase_update);
  }

  pub fn with_allow_rebase_update(mut self, allow_rebase_update: bool) -> Repository {
    self.allow_rebase_update = Some(allow_rebase_update);
    self
  }

  pub fn allow_rebase_update(&self) -> Option<&bool> {
    self.allow_rebase_update.as_ref()
  }

  pub fn reset_allow_rebase_update(&mut self) {
    self.allow_rebase_update = None;
  }

  pub fn set_allow_squash_merge(&mut self, allow_squash_merge: bool) {
    self.allow_squash_merge = Some(allow_squash_merge);
  }

  pub fn with_allow_squash_merge(mut self, allow_squash_merge: bool) -> Repository {
    self.allow_squash_merge = Some(allow_squash_merge);
    self
  }

  pub fn allow_squash_merge(&self) -> Option<&bool> {
    self.allow_squash_merge.as_ref()
  }

  pub fn reset_allow_squash_merge(&mut self) {
    self.allow_squash_merge = None;
  }

  pub fn set_archived(&mut self, archived: bool) {
    self.archived = Some(archived);
  }

  pub fn with_archived(mut self, archived: bool) -> Repository {
    self.archived = Some(archived);
    self
  }

  pub fn archived(&self) -> Option<&bool> {
    self.archived.as_ref()
  }

  pub fn reset_archived(&mut self) {
    self.archived = None;
  }

  pub fn set_archived_at(&mut self, archived_at: String) {
    self.archived_at = Some(archived_at);
  }

  pub fn with_archived_at(mut self, archived_at: String) -> Repository {
    self.archived_at = Some(archived_at);
    self
  }

  pub fn archived_at(&self) -> Option<&String> {
    self.archived_at.as_ref()
  }

  pub fn reset_archived_at(&mut self) {
    self.archived_at = None;
  }

  pub fn set_avatar_url(&mut self, avatar_url: String) {
    self.avatar_url = Some(avatar_url);
  }

  pub fn with_avatar_url(mut self, avatar_url: String) -> Repository {
    self.avatar_url = Some(avatar_url);
    self
  }

  pub fn avatar_url(&self) -> Option<&String> {
    self.avatar_url.as_ref()
  }

  pub fn reset_avatar_url(&mut self) {
    self.avatar_url = None;
  }

  pub fn set_clone_url(&mut self, clone_url: String) {
    self.clone_url = Some(clone_url);
  }

  pub fn with_clone_url(mut self, clone_url: String) -> Repository {
    self.clone_url = Some(clone_url);
    self
  }

  pub fn clone_url(&self) -> Option<&String> {
    self.clone_url.as_ref()
  }

  pub fn reset_clone_url(&mut self) {
    self.clone_url = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Repository {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_default_allow_maintainer_edit(&mut self, default_allow_maintainer_edit: bool) {
    self.default_allow_maintainer_edit = Some(default_allow_maintainer_edit);
  }

  pub fn with_default_allow_maintainer_edit(mut self, default_allow_maintainer_edit: bool) -> Repository {
    self.default_allow_maintainer_edit = Some(default_allow_maintainer_edit);
    self
  }

  pub fn default_allow_maintainer_edit(&self) -> Option<&bool> {
    self.default_allow_maintainer_edit.as_ref()
  }

  pub fn reset_default_allow_maintainer_edit(&mut self) {
    self.default_allow_maintainer_edit = None;
  }

  pub fn set_default_branch(&mut self, default_branch: String) {
    self.default_branch = Some(default_branch);
  }

  pub fn with_default_branch(mut self, default_branch: String) -> Repository {
    self.default_branch = Some(default_branch);
    self
  }

  pub fn default_branch(&self) -> Option<&String> {
    self.default_branch.as_ref()
  }

  pub fn reset_default_branch(&mut self) {
    self.default_branch = None;
  }

  pub fn set_default_delete_branch_after_merge(&mut self, default_delete_branch_after_merge: bool) {
    self.default_delete_branch_after_merge = Some(default_delete_branch_after_merge);
  }

  pub fn with_default_delete_branch_after_merge(mut self, default_delete_branch_after_merge: bool) -> Repository {
    self.default_delete_branch_after_merge = Some(default_delete_branch_after_merge);
    self
  }

  pub fn default_delete_branch_after_merge(&self) -> Option<&bool> {
    self.default_delete_branch_after_merge.as_ref()
  }

  pub fn reset_default_delete_branch_after_merge(&mut self) {
    self.default_delete_branch_after_merge = None;
  }

  pub fn set_default_merge_style(&mut self, default_merge_style: String) {
    self.default_merge_style = Some(default_merge_style);
  }

  pub fn with_default_merge_style(mut self, default_merge_style: String) -> Repository {
    self.default_merge_style = Some(default_merge_style);
    self
  }

  pub fn default_merge_style(&self) -> Option<&String> {
    self.default_merge_style.as_ref()
  }

  pub fn reset_default_merge_style(&mut self) {
    self.default_merge_style = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Repository {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_empty(&mut self, empty: bool) {
    self.empty = Some(empty);
  }

  pub fn with_empty(mut self, empty: bool) -> Repository {
    self.empty = Some(empty);
    self
  }

  pub fn empty(&self) -> Option<&bool> {
    self.empty.as_ref()
  }

  pub fn reset_empty(&mut self) {
    self.empty = None;
  }

  pub fn set_external_tracker(&mut self, external_tracker: ::models::ExternalTracker) {
    self.external_tracker = Some(external_tracker);
  }

  pub fn with_external_tracker(mut self, external_tracker: ::models::ExternalTracker) -> Repository {
    self.external_tracker = Some(external_tracker);
    self
  }

  pub fn external_tracker(&self) -> Option<&::models::ExternalTracker> {
    self.external_tracker.as_ref()
  }

  pub fn reset_external_tracker(&mut self) {
    self.external_tracker = None;
  }

  pub fn set_external_wiki(&mut self, external_wiki: ::models::ExternalWiki) {
    self.external_wiki = Some(external_wiki);
  }

  pub fn with_external_wiki(mut self, external_wiki: ::models::ExternalWiki) -> Repository {
    self.external_wiki = Some(external_wiki);
    self
  }

  pub fn external_wiki(&self) -> Option<&::models::ExternalWiki> {
    self.external_wiki.as_ref()
  }

  pub fn reset_external_wiki(&mut self) {
    self.external_wiki = None;
  }

  pub fn set_fork(&mut self, fork: bool) {
    self.fork = Some(fork);
  }

  pub fn with_fork(mut self, fork: bool) -> Repository {
    self.fork = Some(fork);
    self
  }

  pub fn fork(&self) -> Option<&bool> {
    self.fork.as_ref()
  }

  pub fn reset_fork(&mut self) {
    self.fork = None;
  }

  pub fn set_forks_count(&mut self, forks_count: i64) {
    self.forks_count = Some(forks_count);
  }

  pub fn with_forks_count(mut self, forks_count: i64) -> Repository {
    self.forks_count = Some(forks_count);
    self
  }

  pub fn forks_count(&self) -> Option<&i64> {
    self.forks_count.as_ref()
  }

  pub fn reset_forks_count(&mut self) {
    self.forks_count = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> Repository {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_has_actions(&mut self, has_actions: bool) {
    self.has_actions = Some(has_actions);
  }

  pub fn with_has_actions(mut self, has_actions: bool) -> Repository {
    self.has_actions = Some(has_actions);
    self
  }

  pub fn has_actions(&self) -> Option<&bool> {
    self.has_actions.as_ref()
  }

  pub fn reset_has_actions(&mut self) {
    self.has_actions = None;
  }

  pub fn set_has_issues(&mut self, has_issues: bool) {
    self.has_issues = Some(has_issues);
  }

  pub fn with_has_issues(mut self, has_issues: bool) -> Repository {
    self.has_issues = Some(has_issues);
    self
  }

  pub fn has_issues(&self) -> Option<&bool> {
    self.has_issues.as_ref()
  }

  pub fn reset_has_issues(&mut self) {
    self.has_issues = None;
  }

  pub fn set_has_packages(&mut self, has_packages: bool) {
    self.has_packages = Some(has_packages);
  }

  pub fn with_has_packages(mut self, has_packages: bool) -> Repository {
    self.has_packages = Some(has_packages);
    self
  }

  pub fn has_packages(&self) -> Option<&bool> {
    self.has_packages.as_ref()
  }

  pub fn reset_has_packages(&mut self) {
    self.has_packages = None;
  }

  pub fn set_has_projects(&mut self, has_projects: bool) {
    self.has_projects = Some(has_projects);
  }

  pub fn with_has_projects(mut self, has_projects: bool) -> Repository {
    self.has_projects = Some(has_projects);
    self
  }

  pub fn has_projects(&self) -> Option<&bool> {
    self.has_projects.as_ref()
  }

  pub fn reset_has_projects(&mut self) {
    self.has_projects = None;
  }

  pub fn set_has_pull_requests(&mut self, has_pull_requests: bool) {
    self.has_pull_requests = Some(has_pull_requests);
  }

  pub fn with_has_pull_requests(mut self, has_pull_requests: bool) -> Repository {
    self.has_pull_requests = Some(has_pull_requests);
    self
  }

  pub fn has_pull_requests(&self) -> Option<&bool> {
    self.has_pull_requests.as_ref()
  }

  pub fn reset_has_pull_requests(&mut self) {
    self.has_pull_requests = None;
  }

  pub fn set_has_releases(&mut self, has_releases: bool) {
    self.has_releases = Some(has_releases);
  }

  pub fn with_has_releases(mut self, has_releases: bool) -> Repository {
    self.has_releases = Some(has_releases);
    self
  }

  pub fn has_releases(&self) -> Option<&bool> {
    self.has_releases.as_ref()
  }

  pub fn reset_has_releases(&mut self) {
    self.has_releases = None;
  }

  pub fn set_has_wiki(&mut self, has_wiki: bool) {
    self.has_wiki = Some(has_wiki);
  }

  pub fn with_has_wiki(mut self, has_wiki: bool) -> Repository {
    self.has_wiki = Some(has_wiki);
    self
  }

  pub fn has_wiki(&self) -> Option<&bool> {
    self.has_wiki.as_ref()
  }

  pub fn reset_has_wiki(&mut self) {
    self.has_wiki = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> Repository {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> Repository {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_ignore_whitespace_conflicts(&mut self, ignore_whitespace_conflicts: bool) {
    self.ignore_whitespace_conflicts = Some(ignore_whitespace_conflicts);
  }

  pub fn with_ignore_whitespace_conflicts(mut self, ignore_whitespace_conflicts: bool) -> Repository {
    self.ignore_whitespace_conflicts = Some(ignore_whitespace_conflicts);
    self
  }

  pub fn ignore_whitespace_conflicts(&self) -> Option<&bool> {
    self.ignore_whitespace_conflicts.as_ref()
  }

  pub fn reset_ignore_whitespace_conflicts(&mut self) {
    self.ignore_whitespace_conflicts = None;
  }

  pub fn set_internal(&mut self, internal: bool) {
    self.internal = Some(internal);
  }

  pub fn with_internal(mut self, internal: bool) -> Repository {
    self.internal = Some(internal);
    self
  }

  pub fn internal(&self) -> Option<&bool> {
    self.internal.as_ref()
  }

  pub fn reset_internal(&mut self) {
    self.internal = None;
  }

  pub fn set_internal_tracker(&mut self, internal_tracker: ::models::InternalTracker) {
    self.internal_tracker = Some(internal_tracker);
  }

  pub fn with_internal_tracker(mut self, internal_tracker: ::models::InternalTracker) -> Repository {
    self.internal_tracker = Some(internal_tracker);
    self
  }

  pub fn internal_tracker(&self) -> Option<&::models::InternalTracker> {
    self.internal_tracker.as_ref()
  }

  pub fn reset_internal_tracker(&mut self) {
    self.internal_tracker = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: String) -> Repository {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&String> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_languages_url(&mut self, languages_url: String) {
    self.languages_url = Some(languages_url);
  }

  pub fn with_languages_url(mut self, languages_url: String) -> Repository {
    self.languages_url = Some(languages_url);
    self
  }

  pub fn languages_url(&self) -> Option<&String> {
    self.languages_url.as_ref()
  }

  pub fn reset_languages_url(&mut self) {
    self.languages_url = None;
  }

  pub fn set_link(&mut self, link: String) {
    self.link = Some(link);
  }

  pub fn with_link(mut self, link: String) -> Repository {
    self.link = Some(link);
    self
  }

  pub fn link(&self) -> Option<&String> {
    self.link.as_ref()
  }

  pub fn reset_link(&mut self) {
    self.link = None;
  }

  pub fn set_mirror(&mut self, mirror: bool) {
    self.mirror = Some(mirror);
  }

  pub fn with_mirror(mut self, mirror: bool) -> Repository {
    self.mirror = Some(mirror);
    self
  }

  pub fn mirror(&self) -> Option<&bool> {
    self.mirror.as_ref()
  }

  pub fn reset_mirror(&mut self) {
    self.mirror = None;
  }

  pub fn set_mirror_interval(&mut self, mirror_interval: String) {
    self.mirror_interval = Some(mirror_interval);
  }

  pub fn with_mirror_interval(mut self, mirror_interval: String) -> Repository {
    self.mirror_interval = Some(mirror_interval);
    self
  }

  pub fn mirror_interval(&self) -> Option<&String> {
    self.mirror_interval.as_ref()
  }

  pub fn reset_mirror_interval(&mut self) {
    self.mirror_interval = None;
  }

  pub fn set_mirror_updated(&mut self, mirror_updated: String) {
    self.mirror_updated = Some(mirror_updated);
  }

  pub fn with_mirror_updated(mut self, mirror_updated: String) -> Repository {
    self.mirror_updated = Some(mirror_updated);
    self
  }

  pub fn mirror_updated(&self) -> Option<&String> {
    self.mirror_updated.as_ref()
  }

  pub fn reset_mirror_updated(&mut self) {
    self.mirror_updated = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Repository {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_open_issues_count(&mut self, open_issues_count: i64) {
    self.open_issues_count = Some(open_issues_count);
  }

  pub fn with_open_issues_count(mut self, open_issues_count: i64) -> Repository {
    self.open_issues_count = Some(open_issues_count);
    self
  }

  pub fn open_issues_count(&self) -> Option<&i64> {
    self.open_issues_count.as_ref()
  }

  pub fn reset_open_issues_count(&mut self) {
    self.open_issues_count = None;
  }

  pub fn set_open_pr_counter(&mut self, open_pr_counter: i64) {
    self.open_pr_counter = Some(open_pr_counter);
  }

  pub fn with_open_pr_counter(mut self, open_pr_counter: i64) -> Repository {
    self.open_pr_counter = Some(open_pr_counter);
    self
  }

  pub fn open_pr_counter(&self) -> Option<&i64> {
    self.open_pr_counter.as_ref()
  }

  pub fn reset_open_pr_counter(&mut self) {
    self.open_pr_counter = None;
  }

  pub fn set_original_url(&mut self, original_url: String) {
    self.original_url = Some(original_url);
  }

  pub fn with_original_url(mut self, original_url: String) -> Repository {
    self.original_url = Some(original_url);
    self
  }

  pub fn original_url(&self) -> Option<&String> {
    self.original_url.as_ref()
  }

  pub fn reset_original_url(&mut self) {
    self.original_url = None;
  }

  pub fn set_owner(&mut self, owner: ::models::User) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: ::models::User) -> Repository {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&::models::User> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_parent(&mut self, parent: ::models::Repository) {
    self.parent = Some(parent);
  }

  pub fn with_parent(mut self, parent: ::models::Repository) -> Repository {
    self.parent = Some(parent);
    self
  }

  pub fn parent(&self) -> Option<&::models::Repository> {
    self.parent.as_ref()
  }

  pub fn reset_parent(&mut self) {
    self.parent = None;
  }

  pub fn set_permissions(&mut self, permissions: ::models::Permission) {
    self.permissions = Some(permissions);
  }

  pub fn with_permissions(mut self, permissions: ::models::Permission) -> Repository {
    self.permissions = Some(permissions);
    self
  }

  pub fn permissions(&self) -> Option<&::models::Permission> {
    self.permissions.as_ref()
  }

  pub fn reset_permissions(&mut self) {
    self.permissions = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> Repository {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_release_counter(&mut self, release_counter: i64) {
    self.release_counter = Some(release_counter);
  }

  pub fn with_release_counter(mut self, release_counter: i64) -> Repository {
    self.release_counter = Some(release_counter);
    self
  }

  pub fn release_counter(&self) -> Option<&i64> {
    self.release_counter.as_ref()
  }

  pub fn reset_release_counter(&mut self) {
    self.release_counter = None;
  }

  pub fn set_repo_transfer(&mut self, repo_transfer: ::models::RepoTransfer) {
    self.repo_transfer = Some(repo_transfer);
  }

  pub fn with_repo_transfer(mut self, repo_transfer: ::models::RepoTransfer) -> Repository {
    self.repo_transfer = Some(repo_transfer);
    self
  }

  pub fn repo_transfer(&self) -> Option<&::models::RepoTransfer> {
    self.repo_transfer.as_ref()
  }

  pub fn reset_repo_transfer(&mut self) {
    self.repo_transfer = None;
  }

  pub fn set_size(&mut self, size: i64) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i64) -> Repository {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i64> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_ssh_url(&mut self, ssh_url: String) {
    self.ssh_url = Some(ssh_url);
  }

  pub fn with_ssh_url(mut self, ssh_url: String) -> Repository {
    self.ssh_url = Some(ssh_url);
    self
  }

  pub fn ssh_url(&self) -> Option<&String> {
    self.ssh_url.as_ref()
  }

  pub fn reset_ssh_url(&mut self) {
    self.ssh_url = None;
  }

  pub fn set_stars_count(&mut self, stars_count: i64) {
    self.stars_count = Some(stars_count);
  }

  pub fn with_stars_count(mut self, stars_count: i64) -> Repository {
    self.stars_count = Some(stars_count);
    self
  }

  pub fn stars_count(&self) -> Option<&i64> {
    self.stars_count.as_ref()
  }

  pub fn reset_stars_count(&mut self) {
    self.stars_count = None;
  }

  pub fn set_template(&mut self, template: bool) {
    self.template = Some(template);
  }

  pub fn with_template(mut self, template: bool) -> Repository {
    self.template = Some(template);
    self
  }

  pub fn template(&self) -> Option<&bool> {
    self.template.as_ref()
  }

  pub fn reset_template(&mut self) {
    self.template = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> Repository {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> Repository {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_watchers_count(&mut self, watchers_count: i64) {
    self.watchers_count = Some(watchers_count);
  }

  pub fn with_watchers_count(mut self, watchers_count: i64) -> Repository {
    self.watchers_count = Some(watchers_count);
    self
  }

  pub fn watchers_count(&self) -> Option<&i64> {
    self.watchers_count.as_ref()
  }

  pub fn reset_watchers_count(&mut self) {
    self.watchers_count = None;
  }

  pub fn set_website(&mut self, website: String) {
    self.website = Some(website);
  }

  pub fn with_website(mut self, website: String) -> Repository {
    self.website = Some(website);
    self
  }

  pub fn website(&self) -> Option<&String> {
    self.website.as_ref()
  }

  pub fn reset_website(&mut self) {
    self.website = None;
  }

}



