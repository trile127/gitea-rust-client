/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// MigrateRepoOptions : MigrateRepoOptions options for migrating repository's this is used to interact with api v1

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MigrateRepoOptions {
  #[serde(rename = "auth_password")]
  auth_password: Option<String>,
  #[serde(rename = "auth_token")]
  auth_token: Option<String>,
  #[serde(rename = "auth_username")]
  auth_username: Option<String>,
  #[serde(rename = "clone_addr")]
  clone_addr: String,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "issues")]
  issues: Option<bool>,
  #[serde(rename = "labels")]
  labels: Option<bool>,
  #[serde(rename = "lfs")]
  lfs: Option<bool>,
  #[serde(rename = "lfs_endpoint")]
  lfs_endpoint: Option<String>,
  #[serde(rename = "milestones")]
  milestones: Option<bool>,
  #[serde(rename = "mirror")]
  mirror: Option<bool>,
  #[serde(rename = "mirror_interval")]
  mirror_interval: Option<String>,
  #[serde(rename = "private")]
  private: Option<bool>,
  #[serde(rename = "pull_requests")]
  pull_requests: Option<bool>,
  #[serde(rename = "releases")]
  releases: Option<bool>,
  #[serde(rename = "repo_name")]
  repo_name: String,
  /// Name of User or Organisation who will own Repo after migration
  #[serde(rename = "repo_owner")]
  repo_owner: Option<String>,
  #[serde(rename = "service")]
  service: Option<String>,
  /// deprecated (only for backwards compatibility)
  #[serde(rename = "uid")]
  uid: Option<i64>,
  #[serde(rename = "wiki")]
  wiki: Option<bool>
}

impl MigrateRepoOptions {
  /// MigrateRepoOptions options for migrating repository's this is used to interact with api v1
  pub fn new(clone_addr: String, repo_name: String) -> MigrateRepoOptions {
    MigrateRepoOptions {
      auth_password: None,
      auth_token: None,
      auth_username: None,
      clone_addr: clone_addr,
      description: None,
      issues: None,
      labels: None,
      lfs: None,
      lfs_endpoint: None,
      milestones: None,
      mirror: None,
      mirror_interval: None,
      private: None,
      pull_requests: None,
      releases: None,
      repo_name: repo_name,
      repo_owner: None,
      service: None,
      uid: None,
      wiki: None
    }
  }

  pub fn set_auth_password(&mut self, auth_password: String) {
    self.auth_password = Some(auth_password);
  }

  pub fn with_auth_password(mut self, auth_password: String) -> MigrateRepoOptions {
    self.auth_password = Some(auth_password);
    self
  }

  pub fn auth_password(&self) -> Option<&String> {
    self.auth_password.as_ref()
  }

  pub fn reset_auth_password(&mut self) {
    self.auth_password = None;
  }

  pub fn set_auth_token(&mut self, auth_token: String) {
    self.auth_token = Some(auth_token);
  }

  pub fn with_auth_token(mut self, auth_token: String) -> MigrateRepoOptions {
    self.auth_token = Some(auth_token);
    self
  }

  pub fn auth_token(&self) -> Option<&String> {
    self.auth_token.as_ref()
  }

  pub fn reset_auth_token(&mut self) {
    self.auth_token = None;
  }

  pub fn set_auth_username(&mut self, auth_username: String) {
    self.auth_username = Some(auth_username);
  }

  pub fn with_auth_username(mut self, auth_username: String) -> MigrateRepoOptions {
    self.auth_username = Some(auth_username);
    self
  }

  pub fn auth_username(&self) -> Option<&String> {
    self.auth_username.as_ref()
  }

  pub fn reset_auth_username(&mut self) {
    self.auth_username = None;
  }

  pub fn set_clone_addr(&mut self, clone_addr: String) {
    self.clone_addr = clone_addr;
  }

  pub fn with_clone_addr(mut self, clone_addr: String) -> MigrateRepoOptions {
    self.clone_addr = clone_addr;
    self
  }

  pub fn clone_addr(&self) -> &String {
    &self.clone_addr
  }


  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> MigrateRepoOptions {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_issues(&mut self, issues: bool) {
    self.issues = Some(issues);
  }

  pub fn with_issues(mut self, issues: bool) -> MigrateRepoOptions {
    self.issues = Some(issues);
    self
  }

  pub fn issues(&self) -> Option<&bool> {
    self.issues.as_ref()
  }

  pub fn reset_issues(&mut self) {
    self.issues = None;
  }

  pub fn set_labels(&mut self, labels: bool) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: bool) -> MigrateRepoOptions {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&bool> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_lfs(&mut self, lfs: bool) {
    self.lfs = Some(lfs);
  }

  pub fn with_lfs(mut self, lfs: bool) -> MigrateRepoOptions {
    self.lfs = Some(lfs);
    self
  }

  pub fn lfs(&self) -> Option<&bool> {
    self.lfs.as_ref()
  }

  pub fn reset_lfs(&mut self) {
    self.lfs = None;
  }

  pub fn set_lfs_endpoint(&mut self, lfs_endpoint: String) {
    self.lfs_endpoint = Some(lfs_endpoint);
  }

  pub fn with_lfs_endpoint(mut self, lfs_endpoint: String) -> MigrateRepoOptions {
    self.lfs_endpoint = Some(lfs_endpoint);
    self
  }

  pub fn lfs_endpoint(&self) -> Option<&String> {
    self.lfs_endpoint.as_ref()
  }

  pub fn reset_lfs_endpoint(&mut self) {
    self.lfs_endpoint = None;
  }

  pub fn set_milestones(&mut self, milestones: bool) {
    self.milestones = Some(milestones);
  }

  pub fn with_milestones(mut self, milestones: bool) -> MigrateRepoOptions {
    self.milestones = Some(milestones);
    self
  }

  pub fn milestones(&self) -> Option<&bool> {
    self.milestones.as_ref()
  }

  pub fn reset_milestones(&mut self) {
    self.milestones = None;
  }

  pub fn set_mirror(&mut self, mirror: bool) {
    self.mirror = Some(mirror);
  }

  pub fn with_mirror(mut self, mirror: bool) -> MigrateRepoOptions {
    self.mirror = Some(mirror);
    self
  }

  pub fn mirror(&self) -> Option<&bool> {
    self.mirror.as_ref()
  }

  pub fn reset_mirror(&mut self) {
    self.mirror = None;
  }

  pub fn set_mirror_interval(&mut self, mirror_interval: String) {
    self.mirror_interval = Some(mirror_interval);
  }

  pub fn with_mirror_interval(mut self, mirror_interval: String) -> MigrateRepoOptions {
    self.mirror_interval = Some(mirror_interval);
    self
  }

  pub fn mirror_interval(&self) -> Option<&String> {
    self.mirror_interval.as_ref()
  }

  pub fn reset_mirror_interval(&mut self) {
    self.mirror_interval = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> MigrateRepoOptions {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_pull_requests(&mut self, pull_requests: bool) {
    self.pull_requests = Some(pull_requests);
  }

  pub fn with_pull_requests(mut self, pull_requests: bool) -> MigrateRepoOptions {
    self.pull_requests = Some(pull_requests);
    self
  }

  pub fn pull_requests(&self) -> Option<&bool> {
    self.pull_requests.as_ref()
  }

  pub fn reset_pull_requests(&mut self) {
    self.pull_requests = None;
  }

  pub fn set_releases(&mut self, releases: bool) {
    self.releases = Some(releases);
  }

  pub fn with_releases(mut self, releases: bool) -> MigrateRepoOptions {
    self.releases = Some(releases);
    self
  }

  pub fn releases(&self) -> Option<&bool> {
    self.releases.as_ref()
  }

  pub fn reset_releases(&mut self) {
    self.releases = None;
  }

  pub fn set_repo_name(&mut self, repo_name: String) {
    self.repo_name = repo_name;
  }

  pub fn with_repo_name(mut self, repo_name: String) -> MigrateRepoOptions {
    self.repo_name = repo_name;
    self
  }

  pub fn repo_name(&self) -> &String {
    &self.repo_name
  }


  pub fn set_repo_owner(&mut self, repo_owner: String) {
    self.repo_owner = Some(repo_owner);
  }

  pub fn with_repo_owner(mut self, repo_owner: String) -> MigrateRepoOptions {
    self.repo_owner = Some(repo_owner);
    self
  }

  pub fn repo_owner(&self) -> Option<&String> {
    self.repo_owner.as_ref()
  }

  pub fn reset_repo_owner(&mut self) {
    self.repo_owner = None;
  }

  pub fn set_service(&mut self, service: String) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: String) -> MigrateRepoOptions {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&String> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

  pub fn set_uid(&mut self, uid: i64) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: i64) -> MigrateRepoOptions {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&i64> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

  pub fn set_wiki(&mut self, wiki: bool) {
    self.wiki = Some(wiki);
  }

  pub fn with_wiki(mut self, wiki: bool) -> MigrateRepoOptions {
    self.wiki = Some(wiki);
    self
  }

  pub fn wiki(&self) -> Option<&bool> {
    self.wiki.as_ref()
  }

  pub fn reset_wiki(&mut self) {
    self.wiki = None;
  }

}



