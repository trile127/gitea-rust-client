/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeInfoServices : NodeInfoServices contains the third party sites this server can connect to via their application API

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeInfoServices {
  #[serde(rename = "inbound")]
  inbound: Option<Vec<String>>,
  #[serde(rename = "outbound")]
  outbound: Option<Vec<String>>
}

impl NodeInfoServices {
  /// NodeInfoServices contains the third party sites this server can connect to via their application API
  pub fn new() -> NodeInfoServices {
    NodeInfoServices {
      inbound: None,
      outbound: None
    }
  }

  pub fn set_inbound(&mut self, inbound: Vec<String>) {
    self.inbound = Some(inbound);
  }

  pub fn with_inbound(mut self, inbound: Vec<String>) -> NodeInfoServices {
    self.inbound = Some(inbound);
    self
  }

  pub fn inbound(&self) -> Option<&Vec<String>> {
    self.inbound.as_ref()
  }

  pub fn reset_inbound(&mut self) {
    self.inbound = None;
  }

  pub fn set_outbound(&mut self, outbound: Vec<String>) {
    self.outbound = Some(outbound);
  }

  pub fn with_outbound(mut self, outbound: Vec<String>) -> NodeInfoServices {
    self.outbound = Some(outbound);
    self
  }

  pub fn outbound(&self) -> Option<&Vec<String>> {
    self.outbound.as_ref()
  }

  pub fn reset_outbound(&mut self) {
    self.outbound = None;
  }

}



