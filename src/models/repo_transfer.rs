/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RepoTransfer : RepoTransfer represents a pending repo transfer

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepoTransfer {
  #[serde(rename = "doer")]
  doer: Option<::models::User>,
  #[serde(rename = "recipient")]
  recipient: Option<::models::User>,
  #[serde(rename = "teams")]
  teams: Option<Vec<::models::Team>>
}

impl RepoTransfer {
  /// RepoTransfer represents a pending repo transfer
  pub fn new() -> RepoTransfer {
    RepoTransfer {
      doer: None,
      recipient: None,
      teams: None
    }
  }

  pub fn set_doer(&mut self, doer: ::models::User) {
    self.doer = Some(doer);
  }

  pub fn with_doer(mut self, doer: ::models::User) -> RepoTransfer {
    self.doer = Some(doer);
    self
  }

  pub fn doer(&self) -> Option<&::models::User> {
    self.doer.as_ref()
  }

  pub fn reset_doer(&mut self) {
    self.doer = None;
  }

  pub fn set_recipient(&mut self, recipient: ::models::User) {
    self.recipient = Some(recipient);
  }

  pub fn with_recipient(mut self, recipient: ::models::User) -> RepoTransfer {
    self.recipient = Some(recipient);
    self
  }

  pub fn recipient(&self) -> Option<&::models::User> {
    self.recipient.as_ref()
  }

  pub fn reset_recipient(&mut self) {
    self.recipient = None;
  }

  pub fn set_teams(&mut self, teams: Vec<::models::Team>) {
    self.teams = Some(teams);
  }

  pub fn with_teams(mut self, teams: Vec<::models::Team>) -> RepoTransfer {
    self.teams = Some(teams);
    self
  }

  pub fn teams(&self) -> Option<&Vec<::models::Team>> {
    self.teams.as_ref()
  }

  pub fn reset_teams(&mut self) {
    self.teams = None;
  }

}



