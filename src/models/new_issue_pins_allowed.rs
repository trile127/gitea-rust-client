/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NewIssuePinsAllowed : NewIssuePinsAllowed represents an API response that says if new Issue Pins are allowed

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NewIssuePinsAllowed {
  #[serde(rename = "issues")]
  issues: Option<bool>,
  #[serde(rename = "pull_requests")]
  pull_requests: Option<bool>
}

impl NewIssuePinsAllowed {
  /// NewIssuePinsAllowed represents an API response that says if new Issue Pins are allowed
  pub fn new() -> NewIssuePinsAllowed {
    NewIssuePinsAllowed {
      issues: None,
      pull_requests: None
    }
  }

  pub fn set_issues(&mut self, issues: bool) {
    self.issues = Some(issues);
  }

  pub fn with_issues(mut self, issues: bool) -> NewIssuePinsAllowed {
    self.issues = Some(issues);
    self
  }

  pub fn issues(&self) -> Option<&bool> {
    self.issues.as_ref()
  }

  pub fn reset_issues(&mut self) {
    self.issues = None;
  }

  pub fn set_pull_requests(&mut self, pull_requests: bool) {
    self.pull_requests = Some(pull_requests);
  }

  pub fn with_pull_requests(mut self, pull_requests: bool) -> NewIssuePinsAllowed {
    self.pull_requests = Some(pull_requests);
    self
  }

  pub fn pull_requests(&self) -> Option<&bool> {
    self.pull_requests.as_ref()
  }

  pub fn reset_pull_requests(&mut self) {
    self.pull_requests = None;
  }

}



