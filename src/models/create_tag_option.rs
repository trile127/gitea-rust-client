/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateTagOption : CreateTagOption options when creating a tag

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateTagOption {
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "tag_name")]
  tag_name: String,
  #[serde(rename = "target")]
  target: Option<String>
}

impl CreateTagOption {
  /// CreateTagOption options when creating a tag
  pub fn new(tag_name: String) -> CreateTagOption {
    CreateTagOption {
      message: None,
      tag_name: tag_name,
      target: None
    }
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> CreateTagOption {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_tag_name(&mut self, tag_name: String) {
    self.tag_name = tag_name;
  }

  pub fn with_tag_name(mut self, tag_name: String) -> CreateTagOption {
    self.tag_name = tag_name;
    self
  }

  pub fn tag_name(&self) -> &String {
    &self.tag_name
  }


  pub fn set_target(&mut self, target: String) {
    self.target = Some(target);
  }

  pub fn with_target(mut self, target: String) -> CreateTagOption {
    self.target = Some(target);
    self
  }

  pub fn target(&self) -> Option<&String> {
    self.target.as_ref()
  }

  pub fn reset_target(&mut self) {
    self.target = None;
  }

}



