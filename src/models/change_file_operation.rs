/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ChangeFileOperation : ChangeFileOperation for creating, updating or deleting a file

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChangeFileOperation {
  /// new or updated file content, must be base64 encoded
  #[serde(rename = "content")]
  content: Option<String>,
  /// old path of the file to move
  #[serde(rename = "from_path")]
  from_path: Option<String>,
  /// indicates what to do with the file
  #[serde(rename = "operation")]
  operation: String,
  /// path to the existing or new file
  #[serde(rename = "path")]
  path: String,
  /// sha is the SHA for the file that already exists, required for update or delete
  #[serde(rename = "sha")]
  sha: Option<String>
}

impl ChangeFileOperation {
  /// ChangeFileOperation for creating, updating or deleting a file
  pub fn new(operation: String, path: String) -> ChangeFileOperation {
    ChangeFileOperation {
      content: None,
      from_path: None,
      operation: operation,
      path: path,
      sha: None
    }
  }

  pub fn set_content(&mut self, content: String) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: String) -> ChangeFileOperation {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&String> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

  pub fn set_from_path(&mut self, from_path: String) {
    self.from_path = Some(from_path);
  }

  pub fn with_from_path(mut self, from_path: String) -> ChangeFileOperation {
    self.from_path = Some(from_path);
    self
  }

  pub fn from_path(&self) -> Option<&String> {
    self.from_path.as_ref()
  }

  pub fn reset_from_path(&mut self) {
    self.from_path = None;
  }

  pub fn set_operation(&mut self, operation: String) {
    self.operation = operation;
  }

  pub fn with_operation(mut self, operation: String) -> ChangeFileOperation {
    self.operation = operation;
    self
  }

  pub fn operation(&self) -> &String {
    &self.operation
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> ChangeFileOperation {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> ChangeFileOperation {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

}



