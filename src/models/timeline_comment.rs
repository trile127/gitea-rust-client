/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TimelineComment : TimelineComment represents a timeline comment (comment of any type) on a commit or issue

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TimelineComment {
  #[serde(rename = "assignee")]
  assignee: Option<::models::User>,
  #[serde(rename = "assignee_team")]
  assignee_team: Option<::models::Team>,
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "dependent_issue")]
  dependent_issue: Option<::models::Issue>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "issue_url")]
  issue_url: Option<String>,
  #[serde(rename = "label")]
  label: Option<::models::Label>,
  #[serde(rename = "milestone")]
  milestone: Option<::models::Milestone>,
  #[serde(rename = "new_ref")]
  new_ref: Option<String>,
  #[serde(rename = "new_title")]
  new_title: Option<String>,
  #[serde(rename = "old_milestone")]
  old_milestone: Option<::models::Milestone>,
  #[serde(rename = "old_project_id")]
  old_project_id: Option<i64>,
  #[serde(rename = "old_ref")]
  old_ref: Option<String>,
  #[serde(rename = "old_title")]
  old_title: Option<String>,
  #[serde(rename = "project_id")]
  project_id: Option<i64>,
  #[serde(rename = "pull_request_url")]
  pull_request_url: Option<String>,
  #[serde(rename = "ref_action")]
  ref_action: Option<String>,
  #[serde(rename = "ref_comment")]
  ref_comment: Option<::models::Comment>,
  /// commit SHA where issue/PR was referenced
  #[serde(rename = "ref_commit_sha")]
  ref_commit_sha: Option<String>,
  #[serde(rename = "ref_issue")]
  ref_issue: Option<::models::Issue>,
  /// whether the assignees were removed or added
  #[serde(rename = "removed_assignee")]
  removed_assignee: Option<bool>,
  #[serde(rename = "resolve_doer")]
  resolve_doer: Option<::models::User>,
  #[serde(rename = "review_id")]
  review_id: Option<i64>,
  #[serde(rename = "tracked_time")]
  tracked_time: Option<::models::TrackedTime>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::User>
}

impl TimelineComment {
  /// TimelineComment represents a timeline comment (comment of any type) on a commit or issue
  pub fn new() -> TimelineComment {
    TimelineComment {
      assignee: None,
      assignee_team: None,
      body: None,
      created_at: None,
      dependent_issue: None,
      html_url: None,
      id: None,
      issue_url: None,
      label: None,
      milestone: None,
      new_ref: None,
      new_title: None,
      old_milestone: None,
      old_project_id: None,
      old_ref: None,
      old_title: None,
      project_id: None,
      pull_request_url: None,
      ref_action: None,
      ref_comment: None,
      ref_commit_sha: None,
      ref_issue: None,
      removed_assignee: None,
      resolve_doer: None,
      review_id: None,
      tracked_time: None,
      _type: None,
      updated_at: None,
      user: None
    }
  }

  pub fn set_assignee(&mut self, assignee: ::models::User) {
    self.assignee = Some(assignee);
  }

  pub fn with_assignee(mut self, assignee: ::models::User) -> TimelineComment {
    self.assignee = Some(assignee);
    self
  }

  pub fn assignee(&self) -> Option<&::models::User> {
    self.assignee.as_ref()
  }

  pub fn reset_assignee(&mut self) {
    self.assignee = None;
  }

  pub fn set_assignee_team(&mut self, assignee_team: ::models::Team) {
    self.assignee_team = Some(assignee_team);
  }

  pub fn with_assignee_team(mut self, assignee_team: ::models::Team) -> TimelineComment {
    self.assignee_team = Some(assignee_team);
    self
  }

  pub fn assignee_team(&self) -> Option<&::models::Team> {
    self.assignee_team.as_ref()
  }

  pub fn reset_assignee_team(&mut self) {
    self.assignee_team = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> TimelineComment {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> TimelineComment {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_dependent_issue(&mut self, dependent_issue: ::models::Issue) {
    self.dependent_issue = Some(dependent_issue);
  }

  pub fn with_dependent_issue(mut self, dependent_issue: ::models::Issue) -> TimelineComment {
    self.dependent_issue = Some(dependent_issue);
    self
  }

  pub fn dependent_issue(&self) -> Option<&::models::Issue> {
    self.dependent_issue.as_ref()
  }

  pub fn reset_dependent_issue(&mut self) {
    self.dependent_issue = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> TimelineComment {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> TimelineComment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_issue_url(&mut self, issue_url: String) {
    self.issue_url = Some(issue_url);
  }

  pub fn with_issue_url(mut self, issue_url: String) -> TimelineComment {
    self.issue_url = Some(issue_url);
    self
  }

  pub fn issue_url(&self) -> Option<&String> {
    self.issue_url.as_ref()
  }

  pub fn reset_issue_url(&mut self) {
    self.issue_url = None;
  }

  pub fn set_label(&mut self, label: ::models::Label) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: ::models::Label) -> TimelineComment {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&::models::Label> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_milestone(&mut self, milestone: ::models::Milestone) {
    self.milestone = Some(milestone);
  }

  pub fn with_milestone(mut self, milestone: ::models::Milestone) -> TimelineComment {
    self.milestone = Some(milestone);
    self
  }

  pub fn milestone(&self) -> Option<&::models::Milestone> {
    self.milestone.as_ref()
  }

  pub fn reset_milestone(&mut self) {
    self.milestone = None;
  }

  pub fn set_new_ref(&mut self, new_ref: String) {
    self.new_ref = Some(new_ref);
  }

  pub fn with_new_ref(mut self, new_ref: String) -> TimelineComment {
    self.new_ref = Some(new_ref);
    self
  }

  pub fn new_ref(&self) -> Option<&String> {
    self.new_ref.as_ref()
  }

  pub fn reset_new_ref(&mut self) {
    self.new_ref = None;
  }

  pub fn set_new_title(&mut self, new_title: String) {
    self.new_title = Some(new_title);
  }

  pub fn with_new_title(mut self, new_title: String) -> TimelineComment {
    self.new_title = Some(new_title);
    self
  }

  pub fn new_title(&self) -> Option<&String> {
    self.new_title.as_ref()
  }

  pub fn reset_new_title(&mut self) {
    self.new_title = None;
  }

  pub fn set_old_milestone(&mut self, old_milestone: ::models::Milestone) {
    self.old_milestone = Some(old_milestone);
  }

  pub fn with_old_milestone(mut self, old_milestone: ::models::Milestone) -> TimelineComment {
    self.old_milestone = Some(old_milestone);
    self
  }

  pub fn old_milestone(&self) -> Option<&::models::Milestone> {
    self.old_milestone.as_ref()
  }

  pub fn reset_old_milestone(&mut self) {
    self.old_milestone = None;
  }

  pub fn set_old_project_id(&mut self, old_project_id: i64) {
    self.old_project_id = Some(old_project_id);
  }

  pub fn with_old_project_id(mut self, old_project_id: i64) -> TimelineComment {
    self.old_project_id = Some(old_project_id);
    self
  }

  pub fn old_project_id(&self) -> Option<&i64> {
    self.old_project_id.as_ref()
  }

  pub fn reset_old_project_id(&mut self) {
    self.old_project_id = None;
  }

  pub fn set_old_ref(&mut self, old_ref: String) {
    self.old_ref = Some(old_ref);
  }

  pub fn with_old_ref(mut self, old_ref: String) -> TimelineComment {
    self.old_ref = Some(old_ref);
    self
  }

  pub fn old_ref(&self) -> Option<&String> {
    self.old_ref.as_ref()
  }

  pub fn reset_old_ref(&mut self) {
    self.old_ref = None;
  }

  pub fn set_old_title(&mut self, old_title: String) {
    self.old_title = Some(old_title);
  }

  pub fn with_old_title(mut self, old_title: String) -> TimelineComment {
    self.old_title = Some(old_title);
    self
  }

  pub fn old_title(&self) -> Option<&String> {
    self.old_title.as_ref()
  }

  pub fn reset_old_title(&mut self) {
    self.old_title = None;
  }

  pub fn set_project_id(&mut self, project_id: i64) {
    self.project_id = Some(project_id);
  }

  pub fn with_project_id(mut self, project_id: i64) -> TimelineComment {
    self.project_id = Some(project_id);
    self
  }

  pub fn project_id(&self) -> Option<&i64> {
    self.project_id.as_ref()
  }

  pub fn reset_project_id(&mut self) {
    self.project_id = None;
  }

  pub fn set_pull_request_url(&mut self, pull_request_url: String) {
    self.pull_request_url = Some(pull_request_url);
  }

  pub fn with_pull_request_url(mut self, pull_request_url: String) -> TimelineComment {
    self.pull_request_url = Some(pull_request_url);
    self
  }

  pub fn pull_request_url(&self) -> Option<&String> {
    self.pull_request_url.as_ref()
  }

  pub fn reset_pull_request_url(&mut self) {
    self.pull_request_url = None;
  }

  pub fn set_ref_action(&mut self, ref_action: String) {
    self.ref_action = Some(ref_action);
  }

  pub fn with_ref_action(mut self, ref_action: String) -> TimelineComment {
    self.ref_action = Some(ref_action);
    self
  }

  pub fn ref_action(&self) -> Option<&String> {
    self.ref_action.as_ref()
  }

  pub fn reset_ref_action(&mut self) {
    self.ref_action = None;
  }

  pub fn set_ref_comment(&mut self, ref_comment: ::models::Comment) {
    self.ref_comment = Some(ref_comment);
  }

  pub fn with_ref_comment(mut self, ref_comment: ::models::Comment) -> TimelineComment {
    self.ref_comment = Some(ref_comment);
    self
  }

  pub fn ref_comment(&self) -> Option<&::models::Comment> {
    self.ref_comment.as_ref()
  }

  pub fn reset_ref_comment(&mut self) {
    self.ref_comment = None;
  }

  pub fn set_ref_commit_sha(&mut self, ref_commit_sha: String) {
    self.ref_commit_sha = Some(ref_commit_sha);
  }

  pub fn with_ref_commit_sha(mut self, ref_commit_sha: String) -> TimelineComment {
    self.ref_commit_sha = Some(ref_commit_sha);
    self
  }

  pub fn ref_commit_sha(&self) -> Option<&String> {
    self.ref_commit_sha.as_ref()
  }

  pub fn reset_ref_commit_sha(&mut self) {
    self.ref_commit_sha = None;
  }

  pub fn set_ref_issue(&mut self, ref_issue: ::models::Issue) {
    self.ref_issue = Some(ref_issue);
  }

  pub fn with_ref_issue(mut self, ref_issue: ::models::Issue) -> TimelineComment {
    self.ref_issue = Some(ref_issue);
    self
  }

  pub fn ref_issue(&self) -> Option<&::models::Issue> {
    self.ref_issue.as_ref()
  }

  pub fn reset_ref_issue(&mut self) {
    self.ref_issue = None;
  }

  pub fn set_removed_assignee(&mut self, removed_assignee: bool) {
    self.removed_assignee = Some(removed_assignee);
  }

  pub fn with_removed_assignee(mut self, removed_assignee: bool) -> TimelineComment {
    self.removed_assignee = Some(removed_assignee);
    self
  }

  pub fn removed_assignee(&self) -> Option<&bool> {
    self.removed_assignee.as_ref()
  }

  pub fn reset_removed_assignee(&mut self) {
    self.removed_assignee = None;
  }

  pub fn set_resolve_doer(&mut self, resolve_doer: ::models::User) {
    self.resolve_doer = Some(resolve_doer);
  }

  pub fn with_resolve_doer(mut self, resolve_doer: ::models::User) -> TimelineComment {
    self.resolve_doer = Some(resolve_doer);
    self
  }

  pub fn resolve_doer(&self) -> Option<&::models::User> {
    self.resolve_doer.as_ref()
  }

  pub fn reset_resolve_doer(&mut self) {
    self.resolve_doer = None;
  }

  pub fn set_review_id(&mut self, review_id: i64) {
    self.review_id = Some(review_id);
  }

  pub fn with_review_id(mut self, review_id: i64) -> TimelineComment {
    self.review_id = Some(review_id);
    self
  }

  pub fn review_id(&self) -> Option<&i64> {
    self.review_id.as_ref()
  }

  pub fn reset_review_id(&mut self) {
    self.review_id = None;
  }

  pub fn set_tracked_time(&mut self, tracked_time: ::models::TrackedTime) {
    self.tracked_time = Some(tracked_time);
  }

  pub fn with_tracked_time(mut self, tracked_time: ::models::TrackedTime) -> TimelineComment {
    self.tracked_time = Some(tracked_time);
    self
  }

  pub fn tracked_time(&self) -> Option<&::models::TrackedTime> {
    self.tracked_time.as_ref()
  }

  pub fn reset_tracked_time(&mut self) {
    self.tracked_time = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> TimelineComment {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> TimelineComment {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_user(&mut self, user: ::models::User) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::User) -> TimelineComment {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::User> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



