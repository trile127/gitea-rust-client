/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// User : User represents a user

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct User {
  /// Is user active
  #[serde(rename = "active")]
  active: Option<bool>,
  /// URL to the user's avatar
  #[serde(rename = "avatar_url")]
  avatar_url: Option<String>,
  #[serde(rename = "created")]
  created: Option<String>,
  /// the user's description
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "email")]
  email: Option<String>,
  /// user counts
  #[serde(rename = "followers_count")]
  followers_count: Option<i64>,
  #[serde(rename = "following_count")]
  following_count: Option<i64>,
  /// the user's full name
  #[serde(rename = "full_name")]
  full_name: Option<String>,
  /// the user's id
  #[serde(rename = "id")]
  id: Option<i64>,
  /// Is the user an administrator
  #[serde(rename = "is_admin")]
  is_admin: Option<bool>,
  /// User locale
  #[serde(rename = "language")]
  language: Option<String>,
  #[serde(rename = "last_login")]
  last_login: Option<String>,
  /// the user's location
  #[serde(rename = "location")]
  location: Option<String>,
  /// the user's username
  #[serde(rename = "login")]
  login: Option<String>,
  /// the user's authentication sign-in name.
  #[serde(rename = "login_name")]
  login_name: Option<String>,
  /// Is user login prohibited
  #[serde(rename = "prohibit_login")]
  prohibit_login: Option<bool>,
  /// Is user restricted
  #[serde(rename = "restricted")]
  restricted: Option<bool>,
  #[serde(rename = "starred_repos_count")]
  starred_repos_count: Option<i64>,
  /// User visibility level option: public, limited, private
  #[serde(rename = "visibility")]
  visibility: Option<String>,
  /// the user's website
  #[serde(rename = "website")]
  website: Option<String>
}

impl User {
  /// User represents a user
  pub fn new() -> User {
    User {
      active: None,
      avatar_url: None,
      created: None,
      description: None,
      email: None,
      followers_count: None,
      following_count: None,
      full_name: None,
      id: None,
      is_admin: None,
      language: None,
      last_login: None,
      location: None,
      login: None,
      login_name: None,
      prohibit_login: None,
      restricted: None,
      starred_repos_count: None,
      visibility: None,
      website: None
    }
  }

  pub fn set_active(&mut self, active: bool) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: bool) -> User {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&bool> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_avatar_url(&mut self, avatar_url: String) {
    self.avatar_url = Some(avatar_url);
  }

  pub fn with_avatar_url(mut self, avatar_url: String) -> User {
    self.avatar_url = Some(avatar_url);
    self
  }

  pub fn avatar_url(&self) -> Option<&String> {
    self.avatar_url.as_ref()
  }

  pub fn reset_avatar_url(&mut self) {
    self.avatar_url = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> User {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> User {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> User {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_followers_count(&mut self, followers_count: i64) {
    self.followers_count = Some(followers_count);
  }

  pub fn with_followers_count(mut self, followers_count: i64) -> User {
    self.followers_count = Some(followers_count);
    self
  }

  pub fn followers_count(&self) -> Option<&i64> {
    self.followers_count.as_ref()
  }

  pub fn reset_followers_count(&mut self) {
    self.followers_count = None;
  }

  pub fn set_following_count(&mut self, following_count: i64) {
    self.following_count = Some(following_count);
  }

  pub fn with_following_count(mut self, following_count: i64) -> User {
    self.following_count = Some(following_count);
    self
  }

  pub fn following_count(&self) -> Option<&i64> {
    self.following_count.as_ref()
  }

  pub fn reset_following_count(&mut self) {
    self.following_count = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> User {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> User {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_is_admin(&mut self, is_admin: bool) {
    self.is_admin = Some(is_admin);
  }

  pub fn with_is_admin(mut self, is_admin: bool) -> User {
    self.is_admin = Some(is_admin);
    self
  }

  pub fn is_admin(&self) -> Option<&bool> {
    self.is_admin.as_ref()
  }

  pub fn reset_is_admin(&mut self) {
    self.is_admin = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: String) -> User {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&String> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_last_login(&mut self, last_login: String) {
    self.last_login = Some(last_login);
  }

  pub fn with_last_login(mut self, last_login: String) -> User {
    self.last_login = Some(last_login);
    self
  }

  pub fn last_login(&self) -> Option<&String> {
    self.last_login.as_ref()
  }

  pub fn reset_last_login(&mut self) {
    self.last_login = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> User {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_login(&mut self, login: String) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: String) -> User {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&String> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

  pub fn set_login_name(&mut self, login_name: String) {
    self.login_name = Some(login_name);
  }

  pub fn with_login_name(mut self, login_name: String) -> User {
    self.login_name = Some(login_name);
    self
  }

  pub fn login_name(&self) -> Option<&String> {
    self.login_name.as_ref()
  }

  pub fn reset_login_name(&mut self) {
    self.login_name = None;
  }

  pub fn set_prohibit_login(&mut self, prohibit_login: bool) {
    self.prohibit_login = Some(prohibit_login);
  }

  pub fn with_prohibit_login(mut self, prohibit_login: bool) -> User {
    self.prohibit_login = Some(prohibit_login);
    self
  }

  pub fn prohibit_login(&self) -> Option<&bool> {
    self.prohibit_login.as_ref()
  }

  pub fn reset_prohibit_login(&mut self) {
    self.prohibit_login = None;
  }

  pub fn set_restricted(&mut self, restricted: bool) {
    self.restricted = Some(restricted);
  }

  pub fn with_restricted(mut self, restricted: bool) -> User {
    self.restricted = Some(restricted);
    self
  }

  pub fn restricted(&self) -> Option<&bool> {
    self.restricted.as_ref()
  }

  pub fn reset_restricted(&mut self) {
    self.restricted = None;
  }

  pub fn set_starred_repos_count(&mut self, starred_repos_count: i64) {
    self.starred_repos_count = Some(starred_repos_count);
  }

  pub fn with_starred_repos_count(mut self, starred_repos_count: i64) -> User {
    self.starred_repos_count = Some(starred_repos_count);
    self
  }

  pub fn starred_repos_count(&self) -> Option<&i64> {
    self.starred_repos_count.as_ref()
  }

  pub fn reset_starred_repos_count(&mut self) {
    self.starred_repos_count = None;
  }

  pub fn set_visibility(&mut self, visibility: String) {
    self.visibility = Some(visibility);
  }

  pub fn with_visibility(mut self, visibility: String) -> User {
    self.visibility = Some(visibility);
    self
  }

  pub fn visibility(&self) -> Option<&String> {
    self.visibility.as_ref()
  }

  pub fn reset_visibility(&mut self) {
    self.visibility = None;
  }

  pub fn set_website(&mut self, website: String) {
    self.website = Some(website);
  }

  pub fn with_website(mut self, website: String) -> User {
    self.website = Some(website);
    self
  }

  pub fn website(&self) -> Option<&String> {
    self.website.as_ref()
  }

  pub fn reset_website(&mut self) {
    self.website = None;
  }

}



