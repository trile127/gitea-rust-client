/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateIssueOption : CreateIssueOption options to create one issue

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateIssueOption {
  /// deprecated
  #[serde(rename = "assignee")]
  assignee: Option<String>,
  #[serde(rename = "assignees")]
  assignees: Option<Vec<String>>,
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "closed")]
  closed: Option<bool>,
  #[serde(rename = "due_date")]
  due_date: Option<String>,
  /// list of label ids
  #[serde(rename = "labels")]
  labels: Option<Vec<i64>>,
  /// milestone id
  #[serde(rename = "milestone")]
  milestone: Option<i64>,
  #[serde(rename = "ref")]
  _ref: Option<String>,
  #[serde(rename = "title")]
  title: String
}

impl CreateIssueOption {
  /// CreateIssueOption options to create one issue
  pub fn new(title: String) -> CreateIssueOption {
    CreateIssueOption {
      assignee: None,
      assignees: None,
      body: None,
      closed: None,
      due_date: None,
      labels: None,
      milestone: None,
      _ref: None,
      title: title
    }
  }

  pub fn set_assignee(&mut self, assignee: String) {
    self.assignee = Some(assignee);
  }

  pub fn with_assignee(mut self, assignee: String) -> CreateIssueOption {
    self.assignee = Some(assignee);
    self
  }

  pub fn assignee(&self) -> Option<&String> {
    self.assignee.as_ref()
  }

  pub fn reset_assignee(&mut self) {
    self.assignee = None;
  }

  pub fn set_assignees(&mut self, assignees: Vec<String>) {
    self.assignees = Some(assignees);
  }

  pub fn with_assignees(mut self, assignees: Vec<String>) -> CreateIssueOption {
    self.assignees = Some(assignees);
    self
  }

  pub fn assignees(&self) -> Option<&Vec<String>> {
    self.assignees.as_ref()
  }

  pub fn reset_assignees(&mut self) {
    self.assignees = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> CreateIssueOption {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_closed(&mut self, closed: bool) {
    self.closed = Some(closed);
  }

  pub fn with_closed(mut self, closed: bool) -> CreateIssueOption {
    self.closed = Some(closed);
    self
  }

  pub fn closed(&self) -> Option<&bool> {
    self.closed.as_ref()
  }

  pub fn reset_closed(&mut self) {
    self.closed = None;
  }

  pub fn set_due_date(&mut self, due_date: String) {
    self.due_date = Some(due_date);
  }

  pub fn with_due_date(mut self, due_date: String) -> CreateIssueOption {
    self.due_date = Some(due_date);
    self
  }

  pub fn due_date(&self) -> Option<&String> {
    self.due_date.as_ref()
  }

  pub fn reset_due_date(&mut self) {
    self.due_date = None;
  }

  pub fn set_labels(&mut self, labels: Vec<i64>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<i64>) -> CreateIssueOption {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<i64>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_milestone(&mut self, milestone: i64) {
    self.milestone = Some(milestone);
  }

  pub fn with_milestone(mut self, milestone: i64) -> CreateIssueOption {
    self.milestone = Some(milestone);
    self
  }

  pub fn milestone(&self) -> Option<&i64> {
    self.milestone.as_ref()
  }

  pub fn reset_milestone(&mut self) {
    self.milestone = None;
  }

  pub fn set__ref(&mut self, _ref: String) {
    self._ref = Some(_ref);
  }

  pub fn with__ref(mut self, _ref: String) -> CreateIssueOption {
    self._ref = Some(_ref);
    self
  }

  pub fn _ref(&self) -> Option<&String> {
    self._ref.as_ref()
  }

  pub fn reset__ref(&mut self) {
    self._ref = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = title;
  }

  pub fn with_title(mut self, title: String) -> CreateIssueOption {
    self.title = title;
    self
  }

  pub fn title(&self) -> &String {
    &self.title
  }


}



