/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateOAuth2ApplicationOptions : CreateOAuth2ApplicationOptions holds options to create an oauth2 application

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateOAuth2ApplicationOptions {
  #[serde(rename = "confidential_client")]
  confidential_client: Option<bool>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "redirect_uris")]
  redirect_uris: Option<Vec<String>>
}

impl CreateOAuth2ApplicationOptions {
  /// CreateOAuth2ApplicationOptions holds options to create an oauth2 application
  pub fn new() -> CreateOAuth2ApplicationOptions {
    CreateOAuth2ApplicationOptions {
      confidential_client: None,
      name: None,
      redirect_uris: None
    }
  }

  pub fn set_confidential_client(&mut self, confidential_client: bool) {
    self.confidential_client = Some(confidential_client);
  }

  pub fn with_confidential_client(mut self, confidential_client: bool) -> CreateOAuth2ApplicationOptions {
    self.confidential_client = Some(confidential_client);
    self
  }

  pub fn confidential_client(&self) -> Option<&bool> {
    self.confidential_client.as_ref()
  }

  pub fn reset_confidential_client(&mut self) {
    self.confidential_client = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> CreateOAuth2ApplicationOptions {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_redirect_uris(&mut self, redirect_uris: Vec<String>) {
    self.redirect_uris = Some(redirect_uris);
  }

  pub fn with_redirect_uris(mut self, redirect_uris: Vec<String>) -> CreateOAuth2ApplicationOptions {
    self.redirect_uris = Some(redirect_uris);
    self
  }

  pub fn redirect_uris(&self) -> Option<&Vec<String>> {
    self.redirect_uris.as_ref()
  }

  pub fn reset_redirect_uris(&mut self) {
    self.redirect_uris = None;
  }

}



