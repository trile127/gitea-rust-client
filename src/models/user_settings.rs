/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserSettings : UserSettings represents user settings

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserSettings {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "diff_view_style")]
  diff_view_style: Option<String>,
  #[serde(rename = "full_name")]
  full_name: Option<String>,
  #[serde(rename = "hide_activity")]
  hide_activity: Option<bool>,
  /// Privacy
  #[serde(rename = "hide_email")]
  hide_email: Option<bool>,
  #[serde(rename = "language")]
  language: Option<String>,
  #[serde(rename = "location")]
  location: Option<String>,
  #[serde(rename = "theme")]
  theme: Option<String>,
  #[serde(rename = "website")]
  website: Option<String>
}

impl UserSettings {
  /// UserSettings represents user settings
  pub fn new() -> UserSettings {
    UserSettings {
      description: None,
      diff_view_style: None,
      full_name: None,
      hide_activity: None,
      hide_email: None,
      language: None,
      location: None,
      theme: None,
      website: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> UserSettings {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_diff_view_style(&mut self, diff_view_style: String) {
    self.diff_view_style = Some(diff_view_style);
  }

  pub fn with_diff_view_style(mut self, diff_view_style: String) -> UserSettings {
    self.diff_view_style = Some(diff_view_style);
    self
  }

  pub fn diff_view_style(&self) -> Option<&String> {
    self.diff_view_style.as_ref()
  }

  pub fn reset_diff_view_style(&mut self) {
    self.diff_view_style = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> UserSettings {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_hide_activity(&mut self, hide_activity: bool) {
    self.hide_activity = Some(hide_activity);
  }

  pub fn with_hide_activity(mut self, hide_activity: bool) -> UserSettings {
    self.hide_activity = Some(hide_activity);
    self
  }

  pub fn hide_activity(&self) -> Option<&bool> {
    self.hide_activity.as_ref()
  }

  pub fn reset_hide_activity(&mut self) {
    self.hide_activity = None;
  }

  pub fn set_hide_email(&mut self, hide_email: bool) {
    self.hide_email = Some(hide_email);
  }

  pub fn with_hide_email(mut self, hide_email: bool) -> UserSettings {
    self.hide_email = Some(hide_email);
    self
  }

  pub fn hide_email(&self) -> Option<&bool> {
    self.hide_email.as_ref()
  }

  pub fn reset_hide_email(&mut self) {
    self.hide_email = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: String) -> UserSettings {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&String> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> UserSettings {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_theme(&mut self, theme: String) {
    self.theme = Some(theme);
  }

  pub fn with_theme(mut self, theme: String) -> UserSettings {
    self.theme = Some(theme);
    self
  }

  pub fn theme(&self) -> Option<&String> {
    self.theme.as_ref()
  }

  pub fn reset_theme(&mut self) {
    self.theme = None;
  }

  pub fn set_website(&mut self, website: String) {
    self.website = Some(website);
  }

  pub fn with_website(mut self, website: String) -> UserSettings {
    self.website = Some(website);
    self
  }

  pub fn website(&self) -> Option<&String> {
    self.website.as_ref()
  }

  pub fn reset_website(&mut self) {
    self.website = None;
  }

}



