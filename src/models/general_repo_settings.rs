/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GeneralRepoSettings : GeneralRepoSettings contains global repository settings exposed by API

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GeneralRepoSettings {
  #[serde(rename = "http_git_disabled")]
  http_git_disabled: Option<bool>,
  #[serde(rename = "lfs_disabled")]
  lfs_disabled: Option<bool>,
  #[serde(rename = "migrations_disabled")]
  migrations_disabled: Option<bool>,
  #[serde(rename = "mirrors_disabled")]
  mirrors_disabled: Option<bool>,
  #[serde(rename = "stars_disabled")]
  stars_disabled: Option<bool>,
  #[serde(rename = "time_tracking_disabled")]
  time_tracking_disabled: Option<bool>
}

impl GeneralRepoSettings {
  /// GeneralRepoSettings contains global repository settings exposed by API
  pub fn new() -> GeneralRepoSettings {
    GeneralRepoSettings {
      http_git_disabled: None,
      lfs_disabled: None,
      migrations_disabled: None,
      mirrors_disabled: None,
      stars_disabled: None,
      time_tracking_disabled: None
    }
  }

  pub fn set_http_git_disabled(&mut self, http_git_disabled: bool) {
    self.http_git_disabled = Some(http_git_disabled);
  }

  pub fn with_http_git_disabled(mut self, http_git_disabled: bool) -> GeneralRepoSettings {
    self.http_git_disabled = Some(http_git_disabled);
    self
  }

  pub fn http_git_disabled(&self) -> Option<&bool> {
    self.http_git_disabled.as_ref()
  }

  pub fn reset_http_git_disabled(&mut self) {
    self.http_git_disabled = None;
  }

  pub fn set_lfs_disabled(&mut self, lfs_disabled: bool) {
    self.lfs_disabled = Some(lfs_disabled);
  }

  pub fn with_lfs_disabled(mut self, lfs_disabled: bool) -> GeneralRepoSettings {
    self.lfs_disabled = Some(lfs_disabled);
    self
  }

  pub fn lfs_disabled(&self) -> Option<&bool> {
    self.lfs_disabled.as_ref()
  }

  pub fn reset_lfs_disabled(&mut self) {
    self.lfs_disabled = None;
  }

  pub fn set_migrations_disabled(&mut self, migrations_disabled: bool) {
    self.migrations_disabled = Some(migrations_disabled);
  }

  pub fn with_migrations_disabled(mut self, migrations_disabled: bool) -> GeneralRepoSettings {
    self.migrations_disabled = Some(migrations_disabled);
    self
  }

  pub fn migrations_disabled(&self) -> Option<&bool> {
    self.migrations_disabled.as_ref()
  }

  pub fn reset_migrations_disabled(&mut self) {
    self.migrations_disabled = None;
  }

  pub fn set_mirrors_disabled(&mut self, mirrors_disabled: bool) {
    self.mirrors_disabled = Some(mirrors_disabled);
  }

  pub fn with_mirrors_disabled(mut self, mirrors_disabled: bool) -> GeneralRepoSettings {
    self.mirrors_disabled = Some(mirrors_disabled);
    self
  }

  pub fn mirrors_disabled(&self) -> Option<&bool> {
    self.mirrors_disabled.as_ref()
  }

  pub fn reset_mirrors_disabled(&mut self) {
    self.mirrors_disabled = None;
  }

  pub fn set_stars_disabled(&mut self, stars_disabled: bool) {
    self.stars_disabled = Some(stars_disabled);
  }

  pub fn with_stars_disabled(mut self, stars_disabled: bool) -> GeneralRepoSettings {
    self.stars_disabled = Some(stars_disabled);
    self
  }

  pub fn stars_disabled(&self) -> Option<&bool> {
    self.stars_disabled.as_ref()
  }

  pub fn reset_stars_disabled(&mut self) {
    self.stars_disabled = None;
  }

  pub fn set_time_tracking_disabled(&mut self, time_tracking_disabled: bool) {
    self.time_tracking_disabled = Some(time_tracking_disabled);
  }

  pub fn with_time_tracking_disabled(mut self, time_tracking_disabled: bool) -> GeneralRepoSettings {
    self.time_tracking_disabled = Some(time_tracking_disabled);
    self
  }

  pub fn time_tracking_disabled(&self) -> Option<&bool> {
    self.time_tracking_disabled.as_ref()
  }

  pub fn reset_time_tracking_disabled(&mut self) {
    self.time_tracking_disabled = None;
  }

}



