/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PullReview : PullReview represents a pull request review

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PullReview {
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "comments_count")]
  comments_count: Option<i64>,
  #[serde(rename = "commit_id")]
  commit_id: Option<String>,
  #[serde(rename = "dismissed")]
  dismissed: Option<bool>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "official")]
  official: Option<bool>,
  #[serde(rename = "pull_request_url")]
  pull_request_url: Option<String>,
  #[serde(rename = "stale")]
  stale: Option<bool>,
  #[serde(rename = "state")]
  state: Option<::models::ReviewStateType>,
  #[serde(rename = "submitted_at")]
  submitted_at: Option<String>,
  #[serde(rename = "team")]
  team: Option<::models::Team>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::User>
}

impl PullReview {
  /// PullReview represents a pull request review
  pub fn new() -> PullReview {
    PullReview {
      body: None,
      comments_count: None,
      commit_id: None,
      dismissed: None,
      html_url: None,
      id: None,
      official: None,
      pull_request_url: None,
      stale: None,
      state: None,
      submitted_at: None,
      team: None,
      updated_at: None,
      user: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> PullReview {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_comments_count(&mut self, comments_count: i64) {
    self.comments_count = Some(comments_count);
  }

  pub fn with_comments_count(mut self, comments_count: i64) -> PullReview {
    self.comments_count = Some(comments_count);
    self
  }

  pub fn comments_count(&self) -> Option<&i64> {
    self.comments_count.as_ref()
  }

  pub fn reset_comments_count(&mut self) {
    self.comments_count = None;
  }

  pub fn set_commit_id(&mut self, commit_id: String) {
    self.commit_id = Some(commit_id);
  }

  pub fn with_commit_id(mut self, commit_id: String) -> PullReview {
    self.commit_id = Some(commit_id);
    self
  }

  pub fn commit_id(&self) -> Option<&String> {
    self.commit_id.as_ref()
  }

  pub fn reset_commit_id(&mut self) {
    self.commit_id = None;
  }

  pub fn set_dismissed(&mut self, dismissed: bool) {
    self.dismissed = Some(dismissed);
  }

  pub fn with_dismissed(mut self, dismissed: bool) -> PullReview {
    self.dismissed = Some(dismissed);
    self
  }

  pub fn dismissed(&self) -> Option<&bool> {
    self.dismissed.as_ref()
  }

  pub fn reset_dismissed(&mut self) {
    self.dismissed = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> PullReview {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> PullReview {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_official(&mut self, official: bool) {
    self.official = Some(official);
  }

  pub fn with_official(mut self, official: bool) -> PullReview {
    self.official = Some(official);
    self
  }

  pub fn official(&self) -> Option<&bool> {
    self.official.as_ref()
  }

  pub fn reset_official(&mut self) {
    self.official = None;
  }

  pub fn set_pull_request_url(&mut self, pull_request_url: String) {
    self.pull_request_url = Some(pull_request_url);
  }

  pub fn with_pull_request_url(mut self, pull_request_url: String) -> PullReview {
    self.pull_request_url = Some(pull_request_url);
    self
  }

  pub fn pull_request_url(&self) -> Option<&String> {
    self.pull_request_url.as_ref()
  }

  pub fn reset_pull_request_url(&mut self) {
    self.pull_request_url = None;
  }

  pub fn set_stale(&mut self, stale: bool) {
    self.stale = Some(stale);
  }

  pub fn with_stale(mut self, stale: bool) -> PullReview {
    self.stale = Some(stale);
    self
  }

  pub fn stale(&self) -> Option<&bool> {
    self.stale.as_ref()
  }

  pub fn reset_stale(&mut self) {
    self.stale = None;
  }

  pub fn set_state(&mut self, state: ::models::ReviewStateType) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: ::models::ReviewStateType) -> PullReview {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&::models::ReviewStateType> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_submitted_at(&mut self, submitted_at: String) {
    self.submitted_at = Some(submitted_at);
  }

  pub fn with_submitted_at(mut self, submitted_at: String) -> PullReview {
    self.submitted_at = Some(submitted_at);
    self
  }

  pub fn submitted_at(&self) -> Option<&String> {
    self.submitted_at.as_ref()
  }

  pub fn reset_submitted_at(&mut self) {
    self.submitted_at = None;
  }

  pub fn set_team(&mut self, team: ::models::Team) {
    self.team = Some(team);
  }

  pub fn with_team(mut self, team: ::models::Team) -> PullReview {
    self.team = Some(team);
    self
  }

  pub fn team(&self) -> Option<&::models::Team> {
    self.team.as_ref()
  }

  pub fn reset_team(&mut self) {
    self.team = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> PullReview {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_user(&mut self, user: ::models::User) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::User) -> PullReview {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::User> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



