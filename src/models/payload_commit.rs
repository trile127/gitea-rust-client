/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PayloadCommit : PayloadCommit represents a commit

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PayloadCommit {
  #[serde(rename = "added")]
  added: Option<Vec<String>>,
  #[serde(rename = "author")]
  author: Option<::models::PayloadUser>,
  #[serde(rename = "committer")]
  committer: Option<::models::PayloadUser>,
  /// sha1 hash of the commit
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "modified")]
  modified: Option<Vec<String>>,
  #[serde(rename = "removed")]
  removed: Option<Vec<String>>,
  #[serde(rename = "timestamp")]
  timestamp: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "verification")]
  verification: Option<::models::PayloadCommitVerification>
}

impl PayloadCommit {
  /// PayloadCommit represents a commit
  pub fn new() -> PayloadCommit {
    PayloadCommit {
      added: None,
      author: None,
      committer: None,
      id: None,
      message: None,
      modified: None,
      removed: None,
      timestamp: None,
      url: None,
      verification: None
    }
  }

  pub fn set_added(&mut self, added: Vec<String>) {
    self.added = Some(added);
  }

  pub fn with_added(mut self, added: Vec<String>) -> PayloadCommit {
    self.added = Some(added);
    self
  }

  pub fn added(&self) -> Option<&Vec<String>> {
    self.added.as_ref()
  }

  pub fn reset_added(&mut self) {
    self.added = None;
  }

  pub fn set_author(&mut self, author: ::models::PayloadUser) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::PayloadUser) -> PayloadCommit {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::PayloadUser> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_committer(&mut self, committer: ::models::PayloadUser) {
    self.committer = Some(committer);
  }

  pub fn with_committer(mut self, committer: ::models::PayloadUser) -> PayloadCommit {
    self.committer = Some(committer);
    self
  }

  pub fn committer(&self) -> Option<&::models::PayloadUser> {
    self.committer.as_ref()
  }

  pub fn reset_committer(&mut self) {
    self.committer = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> PayloadCommit {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> PayloadCommit {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_modified(&mut self, modified: Vec<String>) {
    self.modified = Some(modified);
  }

  pub fn with_modified(mut self, modified: Vec<String>) -> PayloadCommit {
    self.modified = Some(modified);
    self
  }

  pub fn modified(&self) -> Option<&Vec<String>> {
    self.modified.as_ref()
  }

  pub fn reset_modified(&mut self) {
    self.modified = None;
  }

  pub fn set_removed(&mut self, removed: Vec<String>) {
    self.removed = Some(removed);
  }

  pub fn with_removed(mut self, removed: Vec<String>) -> PayloadCommit {
    self.removed = Some(removed);
    self
  }

  pub fn removed(&self) -> Option<&Vec<String>> {
    self.removed.as_ref()
  }

  pub fn reset_removed(&mut self) {
    self.removed = None;
  }

  pub fn set_timestamp(&mut self, timestamp: String) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: String) -> PayloadCommit {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&String> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> PayloadCommit {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_verification(&mut self, verification: ::models::PayloadCommitVerification) {
    self.verification = Some(verification);
  }

  pub fn with_verification(mut self, verification: ::models::PayloadCommitVerification) -> PayloadCommit {
    self.verification = Some(verification);
    self
  }

  pub fn verification(&self) -> Option<&::models::PayloadCommitVerification> {
    self.verification.as_ref()
  }

  pub fn reset_verification(&mut self) {
    self.verification = None;
  }

}



