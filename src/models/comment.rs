/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Comment : Comment represents a comment on a commit or issue

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Comment {
  #[serde(rename = "assets")]
  assets: Option<Vec<::models::Attachment>>,
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "issue_url")]
  issue_url: Option<String>,
  #[serde(rename = "original_author")]
  original_author: Option<String>,
  #[serde(rename = "original_author_id")]
  original_author_id: Option<i64>,
  #[serde(rename = "pull_request_url")]
  pull_request_url: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::User>
}

impl Comment {
  /// Comment represents a comment on a commit or issue
  pub fn new() -> Comment {
    Comment {
      assets: None,
      body: None,
      created_at: None,
      html_url: None,
      id: None,
      issue_url: None,
      original_author: None,
      original_author_id: None,
      pull_request_url: None,
      updated_at: None,
      user: None
    }
  }

  pub fn set_assets(&mut self, assets: Vec<::models::Attachment>) {
    self.assets = Some(assets);
  }

  pub fn with_assets(mut self, assets: Vec<::models::Attachment>) -> Comment {
    self.assets = Some(assets);
    self
  }

  pub fn assets(&self) -> Option<&Vec<::models::Attachment>> {
    self.assets.as_ref()
  }

  pub fn reset_assets(&mut self) {
    self.assets = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> Comment {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Comment {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> Comment {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> Comment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_issue_url(&mut self, issue_url: String) {
    self.issue_url = Some(issue_url);
  }

  pub fn with_issue_url(mut self, issue_url: String) -> Comment {
    self.issue_url = Some(issue_url);
    self
  }

  pub fn issue_url(&self) -> Option<&String> {
    self.issue_url.as_ref()
  }

  pub fn reset_issue_url(&mut self) {
    self.issue_url = None;
  }

  pub fn set_original_author(&mut self, original_author: String) {
    self.original_author = Some(original_author);
  }

  pub fn with_original_author(mut self, original_author: String) -> Comment {
    self.original_author = Some(original_author);
    self
  }

  pub fn original_author(&self) -> Option<&String> {
    self.original_author.as_ref()
  }

  pub fn reset_original_author(&mut self) {
    self.original_author = None;
  }

  pub fn set_original_author_id(&mut self, original_author_id: i64) {
    self.original_author_id = Some(original_author_id);
  }

  pub fn with_original_author_id(mut self, original_author_id: i64) -> Comment {
    self.original_author_id = Some(original_author_id);
    self
  }

  pub fn original_author_id(&self) -> Option<&i64> {
    self.original_author_id.as_ref()
  }

  pub fn reset_original_author_id(&mut self) {
    self.original_author_id = None;
  }

  pub fn set_pull_request_url(&mut self, pull_request_url: String) {
    self.pull_request_url = Some(pull_request_url);
  }

  pub fn with_pull_request_url(mut self, pull_request_url: String) -> Comment {
    self.pull_request_url = Some(pull_request_url);
    self
  }

  pub fn pull_request_url(&self) -> Option<&String> {
    self.pull_request_url.as_ref()
  }

  pub fn reset_pull_request_url(&mut self) {
    self.pull_request_url = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> Comment {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_user(&mut self, user: ::models::User) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::User) -> Comment {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::User> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



