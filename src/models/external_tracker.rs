/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ExternalTracker : ExternalTracker represents settings for external tracker

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ExternalTracker {
  /// External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.
  #[serde(rename = "external_tracker_format")]
  external_tracker_format: Option<String>,
  /// External Issue Tracker issue regular expression
  #[serde(rename = "external_tracker_regexp_pattern")]
  external_tracker_regexp_pattern: Option<String>,
  /// External Issue Tracker Number Format, either `numeric`, `alphanumeric`, or `regexp`
  #[serde(rename = "external_tracker_style")]
  external_tracker_style: Option<String>,
  /// URL of external issue tracker.
  #[serde(rename = "external_tracker_url")]
  external_tracker_url: Option<String>
}

impl ExternalTracker {
  /// ExternalTracker represents settings for external tracker
  pub fn new() -> ExternalTracker {
    ExternalTracker {
      external_tracker_format: None,
      external_tracker_regexp_pattern: None,
      external_tracker_style: None,
      external_tracker_url: None
    }
  }

  pub fn set_external_tracker_format(&mut self, external_tracker_format: String) {
    self.external_tracker_format = Some(external_tracker_format);
  }

  pub fn with_external_tracker_format(mut self, external_tracker_format: String) -> ExternalTracker {
    self.external_tracker_format = Some(external_tracker_format);
    self
  }

  pub fn external_tracker_format(&self) -> Option<&String> {
    self.external_tracker_format.as_ref()
  }

  pub fn reset_external_tracker_format(&mut self) {
    self.external_tracker_format = None;
  }

  pub fn set_external_tracker_regexp_pattern(&mut self, external_tracker_regexp_pattern: String) {
    self.external_tracker_regexp_pattern = Some(external_tracker_regexp_pattern);
  }

  pub fn with_external_tracker_regexp_pattern(mut self, external_tracker_regexp_pattern: String) -> ExternalTracker {
    self.external_tracker_regexp_pattern = Some(external_tracker_regexp_pattern);
    self
  }

  pub fn external_tracker_regexp_pattern(&self) -> Option<&String> {
    self.external_tracker_regexp_pattern.as_ref()
  }

  pub fn reset_external_tracker_regexp_pattern(&mut self) {
    self.external_tracker_regexp_pattern = None;
  }

  pub fn set_external_tracker_style(&mut self, external_tracker_style: String) {
    self.external_tracker_style = Some(external_tracker_style);
  }

  pub fn with_external_tracker_style(mut self, external_tracker_style: String) -> ExternalTracker {
    self.external_tracker_style = Some(external_tracker_style);
    self
  }

  pub fn external_tracker_style(&self) -> Option<&String> {
    self.external_tracker_style.as_ref()
  }

  pub fn reset_external_tracker_style(&mut self) {
    self.external_tracker_style = None;
  }

  pub fn set_external_tracker_url(&mut self, external_tracker_url: String) {
    self.external_tracker_url = Some(external_tracker_url);
  }

  pub fn with_external_tracker_url(mut self, external_tracker_url: String) -> ExternalTracker {
    self.external_tracker_url = Some(external_tracker_url);
    self
  }

  pub fn external_tracker_url(&self) -> Option<&String> {
    self.external_tracker_url.as_ref()
  }

  pub fn reset_external_tracker_url(&mut self) {
    self.external_tracker_url = None;
  }

}



