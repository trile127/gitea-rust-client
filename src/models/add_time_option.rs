/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AddTimeOption : AddTimeOption options for adding time to an issue

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AddTimeOption {
  #[serde(rename = "created")]
  created: Option<String>,
  /// time in seconds
  #[serde(rename = "time")]
  time: i64,
  /// User who spent the time (optional)
  #[serde(rename = "user_name")]
  user_name: Option<String>
}

impl AddTimeOption {
  /// AddTimeOption options for adding time to an issue
  pub fn new(time: i64) -> AddTimeOption {
    AddTimeOption {
      created: None,
      time: time,
      user_name: None
    }
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> AddTimeOption {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_time(&mut self, time: i64) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i64) -> AddTimeOption {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i64 {
    &self.time
  }


  pub fn set_user_name(&mut self, user_name: String) {
    self.user_name = Some(user_name);
  }

  pub fn with_user_name(mut self, user_name: String) -> AddTimeOption {
    self.user_name = Some(user_name);
    self
  }

  pub fn user_name(&self) -> Option<&String> {
    self.user_name.as_ref()
  }

  pub fn reset_user_name(&mut self) {
    self.user_name = None;
  }

}



