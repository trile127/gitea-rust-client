/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeInfoSoftware : NodeInfoSoftware contains Metadata about server software in use

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeInfoSoftware {
  #[serde(rename = "homepage")]
  homepage: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "repository")]
  repository: Option<String>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl NodeInfoSoftware {
  /// NodeInfoSoftware contains Metadata about server software in use
  pub fn new() -> NodeInfoSoftware {
    NodeInfoSoftware {
      homepage: None,
      name: None,
      repository: None,
      version: None
    }
  }

  pub fn set_homepage(&mut self, homepage: String) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: String) -> NodeInfoSoftware {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&String> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NodeInfoSoftware {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_repository(&mut self, repository: String) {
    self.repository = Some(repository);
  }

  pub fn with_repository(mut self, repository: String) -> NodeInfoSoftware {
    self.repository = Some(repository);
    self
  }

  pub fn repository(&self) -> Option<&String> {
    self.repository.as_ref()
  }

  pub fn reset_repository(&mut self) {
    self.repository = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> NodeInfoSoftware {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



