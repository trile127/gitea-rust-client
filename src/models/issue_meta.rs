/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IssueMeta : IssueMeta basic issue information

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IssueMeta {
  #[serde(rename = "index")]
  index: Option<i64>,
  #[serde(rename = "owner")]
  owner: Option<String>,
  #[serde(rename = "repo")]
  repo: Option<String>
}

impl IssueMeta {
  /// IssueMeta basic issue information
  pub fn new() -> IssueMeta {
    IssueMeta {
      index: None,
      owner: None,
      repo: None
    }
  }

  pub fn set_index(&mut self, index: i64) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i64) -> IssueMeta {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i64> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_owner(&mut self, owner: String) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: String) -> IssueMeta {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&String> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_repo(&mut self, repo: String) {
    self.repo = Some(repo);
  }

  pub fn with_repo(mut self, repo: String) -> IssueMeta {
    self.repo = Some(repo);
    self
  }

  pub fn repo(&self) -> Option<&String> {
    self.repo.as_ref()
  }

  pub fn reset_repo(&mut self) {
    self.repo = None;
  }

}



