/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateBranchRepoOption : CreateBranchRepoOption options when creating a branch in a repository

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateBranchRepoOption {
  /// Name of the branch to create
  #[serde(rename = "new_branch_name")]
  new_branch_name: String,
  /// Deprecated: true Name of the old branch to create from
  #[serde(rename = "old_branch_name")]
  old_branch_name: Option<String>,
  /// Name of the old branch/tag/commit to create from
  #[serde(rename = "old_ref_name")]
  old_ref_name: Option<String>
}

impl CreateBranchRepoOption {
  /// CreateBranchRepoOption options when creating a branch in a repository
  pub fn new(new_branch_name: String) -> CreateBranchRepoOption {
    CreateBranchRepoOption {
      new_branch_name: new_branch_name,
      old_branch_name: None,
      old_ref_name: None
    }
  }

  pub fn set_new_branch_name(&mut self, new_branch_name: String) {
    self.new_branch_name = new_branch_name;
  }

  pub fn with_new_branch_name(mut self, new_branch_name: String) -> CreateBranchRepoOption {
    self.new_branch_name = new_branch_name;
    self
  }

  pub fn new_branch_name(&self) -> &String {
    &self.new_branch_name
  }


  pub fn set_old_branch_name(&mut self, old_branch_name: String) {
    self.old_branch_name = Some(old_branch_name);
  }

  pub fn with_old_branch_name(mut self, old_branch_name: String) -> CreateBranchRepoOption {
    self.old_branch_name = Some(old_branch_name);
    self
  }

  pub fn old_branch_name(&self) -> Option<&String> {
    self.old_branch_name.as_ref()
  }

  pub fn reset_old_branch_name(&mut self) {
    self.old_branch_name = None;
  }

  pub fn set_old_ref_name(&mut self, old_ref_name: String) {
    self.old_ref_name = Some(old_ref_name);
  }

  pub fn with_old_ref_name(mut self, old_ref_name: String) -> CreateBranchRepoOption {
    self.old_ref_name = Some(old_ref_name);
    self
  }

  pub fn old_ref_name(&self) -> Option<&String> {
    self.old_ref_name.as_ref()
  }

  pub fn reset_old_ref_name(&mut self) {
    self.old_ref_name = None;
  }

}



