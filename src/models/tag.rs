/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Tag : Tag represents a repository tag

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Tag {
  #[serde(rename = "commit")]
  commit: Option<::models::CommitMeta>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "tarball_url")]
  tarball_url: Option<String>,
  #[serde(rename = "zipball_url")]
  zipball_url: Option<String>
}

impl Tag {
  /// Tag represents a repository tag
  pub fn new() -> Tag {
    Tag {
      commit: None,
      id: None,
      message: None,
      name: None,
      tarball_url: None,
      zipball_url: None
    }
  }

  pub fn set_commit(&mut self, commit: ::models::CommitMeta) {
    self.commit = Some(commit);
  }

  pub fn with_commit(mut self, commit: ::models::CommitMeta) -> Tag {
    self.commit = Some(commit);
    self
  }

  pub fn commit(&self) -> Option<&::models::CommitMeta> {
    self.commit.as_ref()
  }

  pub fn reset_commit(&mut self) {
    self.commit = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Tag {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> Tag {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Tag {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_tarball_url(&mut self, tarball_url: String) {
    self.tarball_url = Some(tarball_url);
  }

  pub fn with_tarball_url(mut self, tarball_url: String) -> Tag {
    self.tarball_url = Some(tarball_url);
    self
  }

  pub fn tarball_url(&self) -> Option<&String> {
    self.tarball_url.as_ref()
  }

  pub fn reset_tarball_url(&mut self) {
    self.tarball_url = None;
  }

  pub fn set_zipball_url(&mut self, zipball_url: String) {
    self.zipball_url = Some(zipball_url);
  }

  pub fn with_zipball_url(mut self, zipball_url: String) -> Tag {
    self.zipball_url = Some(zipball_url);
    self
  }

  pub fn zipball_url(&self) -> Option<&String> {
    self.zipball_url.as_ref()
  }

  pub fn reset_zipball_url(&mut self) {
    self.zipball_url = None;
  }

}



