/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PayloadCommitVerification : PayloadCommitVerification represents the GPG verification of a commit

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PayloadCommitVerification {
  #[serde(rename = "payload")]
  payload: Option<String>,
  #[serde(rename = "reason")]
  reason: Option<String>,
  #[serde(rename = "signature")]
  signature: Option<String>,
  #[serde(rename = "signer")]
  signer: Option<::models::PayloadUser>,
  #[serde(rename = "verified")]
  verified: Option<bool>
}

impl PayloadCommitVerification {
  /// PayloadCommitVerification represents the GPG verification of a commit
  pub fn new() -> PayloadCommitVerification {
    PayloadCommitVerification {
      payload: None,
      reason: None,
      signature: None,
      signer: None,
      verified: None
    }
  }

  pub fn set_payload(&mut self, payload: String) {
    self.payload = Some(payload);
  }

  pub fn with_payload(mut self, payload: String) -> PayloadCommitVerification {
    self.payload = Some(payload);
    self
  }

  pub fn payload(&self) -> Option<&String> {
    self.payload.as_ref()
  }

  pub fn reset_payload(&mut self) {
    self.payload = None;
  }

  pub fn set_reason(&mut self, reason: String) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: String) -> PayloadCommitVerification {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&String> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_signature(&mut self, signature: String) {
    self.signature = Some(signature);
  }

  pub fn with_signature(mut self, signature: String) -> PayloadCommitVerification {
    self.signature = Some(signature);
    self
  }

  pub fn signature(&self) -> Option<&String> {
    self.signature.as_ref()
  }

  pub fn reset_signature(&mut self) {
    self.signature = None;
  }

  pub fn set_signer(&mut self, signer: ::models::PayloadUser) {
    self.signer = Some(signer);
  }

  pub fn with_signer(mut self, signer: ::models::PayloadUser) -> PayloadCommitVerification {
    self.signer = Some(signer);
    self
  }

  pub fn signer(&self) -> Option<&::models::PayloadUser> {
    self.signer.as_ref()
  }

  pub fn reset_signer(&mut self) {
    self.signer = None;
  }

  pub fn set_verified(&mut self, verified: bool) {
    self.verified = Some(verified);
  }

  pub fn with_verified(mut self, verified: bool) -> PayloadCommitVerification {
    self.verified = Some(verified);
    self
  }

  pub fn verified(&self) -> Option<&bool> {
    self.verified.as_ref()
  }

  pub fn reset_verified(&mut self) {
    self.verified = None;
  }

}



