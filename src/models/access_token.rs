/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AccessToken {
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "scopes")]
  scopes: Option<Vec<String>>,
  #[serde(rename = "sha1")]
  sha1: Option<String>,
  #[serde(rename = "token_last_eight")]
  token_last_eight: Option<String>
}

impl AccessToken {
  pub fn new() -> AccessToken {
    AccessToken {
      id: None,
      name: None,
      scopes: None,
      sha1: None,
      token_last_eight: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> AccessToken {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> AccessToken {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_scopes(&mut self, scopes: Vec<String>) {
    self.scopes = Some(scopes);
  }

  pub fn with_scopes(mut self, scopes: Vec<String>) -> AccessToken {
    self.scopes = Some(scopes);
    self
  }

  pub fn scopes(&self) -> Option<&Vec<String>> {
    self.scopes.as_ref()
  }

  pub fn reset_scopes(&mut self) {
    self.scopes = None;
  }

  pub fn set_sha1(&mut self, sha1: String) {
    self.sha1 = Some(sha1);
  }

  pub fn with_sha1(mut self, sha1: String) -> AccessToken {
    self.sha1 = Some(sha1);
    self
  }

  pub fn sha1(&self) -> Option<&String> {
    self.sha1.as_ref()
  }

  pub fn reset_sha1(&mut self) {
    self.sha1 = None;
  }

  pub fn set_token_last_eight(&mut self, token_last_eight: String) {
    self.token_last_eight = Some(token_last_eight);
  }

  pub fn with_token_last_eight(mut self, token_last_eight: String) -> AccessToken {
    self.token_last_eight = Some(token_last_eight);
    self
  }

  pub fn token_last_eight(&self) -> Option<&String> {
    self.token_last_eight.as_ref()
  }

  pub fn reset_token_last_eight(&mut self) {
    self.token_last_eight = None;
  }

}



