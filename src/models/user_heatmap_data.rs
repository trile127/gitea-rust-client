/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserHeatmapData : UserHeatmapData represents the data needed to create a heatmap

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserHeatmapData {
  #[serde(rename = "contributions")]
  contributions: Option<i64>,
  #[serde(rename = "timestamp")]
  timestamp: Option<::models::TimeStamp>
}

impl UserHeatmapData {
  /// UserHeatmapData represents the data needed to create a heatmap
  pub fn new() -> UserHeatmapData {
    UserHeatmapData {
      contributions: None,
      timestamp: None
    }
  }

  pub fn set_contributions(&mut self, contributions: i64) {
    self.contributions = Some(contributions);
  }

  pub fn with_contributions(mut self, contributions: i64) -> UserHeatmapData {
    self.contributions = Some(contributions);
    self
  }

  pub fn contributions(&self) -> Option<&i64> {
    self.contributions.as_ref()
  }

  pub fn reset_contributions(&mut self) {
    self.contributions = None;
  }

  pub fn set_timestamp(&mut self, timestamp: ::models::TimeStamp) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: ::models::TimeStamp) -> UserHeatmapData {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&::models::TimeStamp> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

}



