/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PushMirror : PushMirror represents information of a push mirror

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PushMirror {
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "interval")]
  interval: Option<String>,
  #[serde(rename = "last_error")]
  last_error: Option<String>,
  #[serde(rename = "last_update")]
  last_update: Option<String>,
  #[serde(rename = "remote_address")]
  remote_address: Option<String>,
  #[serde(rename = "remote_name")]
  remote_name: Option<String>,
  #[serde(rename = "repo_name")]
  repo_name: Option<String>,
  #[serde(rename = "sync_on_commit")]
  sync_on_commit: Option<bool>
}

impl PushMirror {
  /// PushMirror represents information of a push mirror
  pub fn new() -> PushMirror {
    PushMirror {
      created: None,
      interval: None,
      last_error: None,
      last_update: None,
      remote_address: None,
      remote_name: None,
      repo_name: None,
      sync_on_commit: None
    }
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> PushMirror {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_interval(&mut self, interval: String) {
    self.interval = Some(interval);
  }

  pub fn with_interval(mut self, interval: String) -> PushMirror {
    self.interval = Some(interval);
    self
  }

  pub fn interval(&self) -> Option<&String> {
    self.interval.as_ref()
  }

  pub fn reset_interval(&mut self) {
    self.interval = None;
  }

  pub fn set_last_error(&mut self, last_error: String) {
    self.last_error = Some(last_error);
  }

  pub fn with_last_error(mut self, last_error: String) -> PushMirror {
    self.last_error = Some(last_error);
    self
  }

  pub fn last_error(&self) -> Option<&String> {
    self.last_error.as_ref()
  }

  pub fn reset_last_error(&mut self) {
    self.last_error = None;
  }

  pub fn set_last_update(&mut self, last_update: String) {
    self.last_update = Some(last_update);
  }

  pub fn with_last_update(mut self, last_update: String) -> PushMirror {
    self.last_update = Some(last_update);
    self
  }

  pub fn last_update(&self) -> Option<&String> {
    self.last_update.as_ref()
  }

  pub fn reset_last_update(&mut self) {
    self.last_update = None;
  }

  pub fn set_remote_address(&mut self, remote_address: String) {
    self.remote_address = Some(remote_address);
  }

  pub fn with_remote_address(mut self, remote_address: String) -> PushMirror {
    self.remote_address = Some(remote_address);
    self
  }

  pub fn remote_address(&self) -> Option<&String> {
    self.remote_address.as_ref()
  }

  pub fn reset_remote_address(&mut self) {
    self.remote_address = None;
  }

  pub fn set_remote_name(&mut self, remote_name: String) {
    self.remote_name = Some(remote_name);
  }

  pub fn with_remote_name(mut self, remote_name: String) -> PushMirror {
    self.remote_name = Some(remote_name);
    self
  }

  pub fn remote_name(&self) -> Option<&String> {
    self.remote_name.as_ref()
  }

  pub fn reset_remote_name(&mut self) {
    self.remote_name = None;
  }

  pub fn set_repo_name(&mut self, repo_name: String) {
    self.repo_name = Some(repo_name);
  }

  pub fn with_repo_name(mut self, repo_name: String) -> PushMirror {
    self.repo_name = Some(repo_name);
    self
  }

  pub fn repo_name(&self) -> Option<&String> {
    self.repo_name.as_ref()
  }

  pub fn reset_repo_name(&mut self) {
    self.repo_name = None;
  }

  pub fn set_sync_on_commit(&mut self, sync_on_commit: bool) {
    self.sync_on_commit = Some(sync_on_commit);
  }

  pub fn with_sync_on_commit(mut self, sync_on_commit: bool) -> PushMirror {
    self.sync_on_commit = Some(sync_on_commit);
    self
  }

  pub fn sync_on_commit(&self) -> Option<&bool> {
    self.sync_on_commit.as_ref()
  }

  pub fn reset_sync_on_commit(&mut self) {
    self.sync_on_commit = None;
  }

}



