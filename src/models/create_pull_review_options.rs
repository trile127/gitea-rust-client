/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreatePullReviewOptions : CreatePullReviewOptions are options to create a pull review

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreatePullReviewOptions {
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "comments")]
  comments: Option<Vec<::models::CreatePullReviewComment>>,
  #[serde(rename = "commit_id")]
  commit_id: Option<String>,
  #[serde(rename = "event")]
  event: Option<::models::ReviewStateType>
}

impl CreatePullReviewOptions {
  /// CreatePullReviewOptions are options to create a pull review
  pub fn new() -> CreatePullReviewOptions {
    CreatePullReviewOptions {
      body: None,
      comments: None,
      commit_id: None,
      event: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> CreatePullReviewOptions {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_comments(&mut self, comments: Vec<::models::CreatePullReviewComment>) {
    self.comments = Some(comments);
  }

  pub fn with_comments(mut self, comments: Vec<::models::CreatePullReviewComment>) -> CreatePullReviewOptions {
    self.comments = Some(comments);
    self
  }

  pub fn comments(&self) -> Option<&Vec<::models::CreatePullReviewComment>> {
    self.comments.as_ref()
  }

  pub fn reset_comments(&mut self) {
    self.comments = None;
  }

  pub fn set_commit_id(&mut self, commit_id: String) {
    self.commit_id = Some(commit_id);
  }

  pub fn with_commit_id(mut self, commit_id: String) -> CreatePullReviewOptions {
    self.commit_id = Some(commit_id);
    self
  }

  pub fn commit_id(&self) -> Option<&String> {
    self.commit_id.as_ref()
  }

  pub fn reset_commit_id(&mut self) {
    self.commit_id = None;
  }

  pub fn set_event(&mut self, event: ::models::ReviewStateType) {
    self.event = Some(event);
  }

  pub fn with_event(mut self, event: ::models::ReviewStateType) -> CreatePullReviewOptions {
    self.event = Some(event);
    self
  }

  pub fn event(&self) -> Option<&::models::ReviewStateType> {
    self.event.as_ref()
  }

  pub fn reset_event(&mut self) {
    self.event = None;
  }

}



