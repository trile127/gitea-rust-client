/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PullReviewComment : PullReviewComment represents a comment on a pull request review

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PullReviewComment {
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "commit_id")]
  commit_id: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "diff_hunk")]
  diff_hunk: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "original_commit_id")]
  original_commit_id: Option<String>,
  #[serde(rename = "original_position")]
  original_position: Option<i32>,
  #[serde(rename = "path")]
  path: Option<String>,
  #[serde(rename = "position")]
  position: Option<i32>,
  #[serde(rename = "pull_request_review_id")]
  pull_request_review_id: Option<i64>,
  #[serde(rename = "pull_request_url")]
  pull_request_url: Option<String>,
  #[serde(rename = "resolver")]
  resolver: Option<::models::User>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::User>
}

impl PullReviewComment {
  /// PullReviewComment represents a comment on a pull request review
  pub fn new() -> PullReviewComment {
    PullReviewComment {
      body: None,
      commit_id: None,
      created_at: None,
      diff_hunk: None,
      html_url: None,
      id: None,
      original_commit_id: None,
      original_position: None,
      path: None,
      position: None,
      pull_request_review_id: None,
      pull_request_url: None,
      resolver: None,
      updated_at: None,
      user: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> PullReviewComment {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_commit_id(&mut self, commit_id: String) {
    self.commit_id = Some(commit_id);
  }

  pub fn with_commit_id(mut self, commit_id: String) -> PullReviewComment {
    self.commit_id = Some(commit_id);
    self
  }

  pub fn commit_id(&self) -> Option<&String> {
    self.commit_id.as_ref()
  }

  pub fn reset_commit_id(&mut self) {
    self.commit_id = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> PullReviewComment {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_diff_hunk(&mut self, diff_hunk: String) {
    self.diff_hunk = Some(diff_hunk);
  }

  pub fn with_diff_hunk(mut self, diff_hunk: String) -> PullReviewComment {
    self.diff_hunk = Some(diff_hunk);
    self
  }

  pub fn diff_hunk(&self) -> Option<&String> {
    self.diff_hunk.as_ref()
  }

  pub fn reset_diff_hunk(&mut self) {
    self.diff_hunk = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> PullReviewComment {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> PullReviewComment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_original_commit_id(&mut self, original_commit_id: String) {
    self.original_commit_id = Some(original_commit_id);
  }

  pub fn with_original_commit_id(mut self, original_commit_id: String) -> PullReviewComment {
    self.original_commit_id = Some(original_commit_id);
    self
  }

  pub fn original_commit_id(&self) -> Option<&String> {
    self.original_commit_id.as_ref()
  }

  pub fn reset_original_commit_id(&mut self) {
    self.original_commit_id = None;
  }

  pub fn set_original_position(&mut self, original_position: i32) {
    self.original_position = Some(original_position);
  }

  pub fn with_original_position(mut self, original_position: i32) -> PullReviewComment {
    self.original_position = Some(original_position);
    self
  }

  pub fn original_position(&self) -> Option<&i32> {
    self.original_position.as_ref()
  }

  pub fn reset_original_position(&mut self) {
    self.original_position = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> PullReviewComment {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_position(&mut self, position: i32) {
    self.position = Some(position);
  }

  pub fn with_position(mut self, position: i32) -> PullReviewComment {
    self.position = Some(position);
    self
  }

  pub fn position(&self) -> Option<&i32> {
    self.position.as_ref()
  }

  pub fn reset_position(&mut self) {
    self.position = None;
  }

  pub fn set_pull_request_review_id(&mut self, pull_request_review_id: i64) {
    self.pull_request_review_id = Some(pull_request_review_id);
  }

  pub fn with_pull_request_review_id(mut self, pull_request_review_id: i64) -> PullReviewComment {
    self.pull_request_review_id = Some(pull_request_review_id);
    self
  }

  pub fn pull_request_review_id(&self) -> Option<&i64> {
    self.pull_request_review_id.as_ref()
  }

  pub fn reset_pull_request_review_id(&mut self) {
    self.pull_request_review_id = None;
  }

  pub fn set_pull_request_url(&mut self, pull_request_url: String) {
    self.pull_request_url = Some(pull_request_url);
  }

  pub fn with_pull_request_url(mut self, pull_request_url: String) -> PullReviewComment {
    self.pull_request_url = Some(pull_request_url);
    self
  }

  pub fn pull_request_url(&self) -> Option<&String> {
    self.pull_request_url.as_ref()
  }

  pub fn reset_pull_request_url(&mut self) {
    self.pull_request_url = None;
  }

  pub fn set_resolver(&mut self, resolver: ::models::User) {
    self.resolver = Some(resolver);
  }

  pub fn with_resolver(mut self, resolver: ::models::User) -> PullReviewComment {
    self.resolver = Some(resolver);
    self
  }

  pub fn resolver(&self) -> Option<&::models::User> {
    self.resolver.as_ref()
  }

  pub fn reset_resolver(&mut self) {
    self.resolver = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> PullReviewComment {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_user(&mut self, user: ::models::User) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::User) -> PullReviewComment {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::User> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



