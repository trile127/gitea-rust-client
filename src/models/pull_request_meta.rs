/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PullRequestMeta : PullRequestMeta PR info if an issue is a PR

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PullRequestMeta {
  #[serde(rename = "merged")]
  merged: Option<bool>,
  #[serde(rename = "merged_at")]
  merged_at: Option<String>
}

impl PullRequestMeta {
  /// PullRequestMeta PR info if an issue is a PR
  pub fn new() -> PullRequestMeta {
    PullRequestMeta {
      merged: None,
      merged_at: None
    }
  }

  pub fn set_merged(&mut self, merged: bool) {
    self.merged = Some(merged);
  }

  pub fn with_merged(mut self, merged: bool) -> PullRequestMeta {
    self.merged = Some(merged);
    self
  }

  pub fn merged(&self) -> Option<&bool> {
    self.merged.as_ref()
  }

  pub fn reset_merged(&mut self) {
    self.merged = None;
  }

  pub fn set_merged_at(&mut self, merged_at: String) {
    self.merged_at = Some(merged_at);
  }

  pub fn with_merged_at(mut self, merged_at: String) -> PullRequestMeta {
    self.merged_at = Some(merged_at);
    self
  }

  pub fn merged_at(&self) -> Option<&String> {
    self.merged_at.as_ref()
  }

  pub fn reset_merged_at(&mut self) {
    self.merged_at = None;
  }

}



