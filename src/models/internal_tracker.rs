/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InternalTracker : InternalTracker represents settings for internal tracker

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InternalTracker {
  /// Let only contributors track time (Built-in issue tracker)
  #[serde(rename = "allow_only_contributors_to_track_time")]
  allow_only_contributors_to_track_time: Option<bool>,
  /// Enable dependencies for issues and pull requests (Built-in issue tracker)
  #[serde(rename = "enable_issue_dependencies")]
  enable_issue_dependencies: Option<bool>,
  /// Enable time tracking (Built-in issue tracker)
  #[serde(rename = "enable_time_tracker")]
  enable_time_tracker: Option<bool>
}

impl InternalTracker {
  /// InternalTracker represents settings for internal tracker
  pub fn new() -> InternalTracker {
    InternalTracker {
      allow_only_contributors_to_track_time: None,
      enable_issue_dependencies: None,
      enable_time_tracker: None
    }
  }

  pub fn set_allow_only_contributors_to_track_time(&mut self, allow_only_contributors_to_track_time: bool) {
    self.allow_only_contributors_to_track_time = Some(allow_only_contributors_to_track_time);
  }

  pub fn with_allow_only_contributors_to_track_time(mut self, allow_only_contributors_to_track_time: bool) -> InternalTracker {
    self.allow_only_contributors_to_track_time = Some(allow_only_contributors_to_track_time);
    self
  }

  pub fn allow_only_contributors_to_track_time(&self) -> Option<&bool> {
    self.allow_only_contributors_to_track_time.as_ref()
  }

  pub fn reset_allow_only_contributors_to_track_time(&mut self) {
    self.allow_only_contributors_to_track_time = None;
  }

  pub fn set_enable_issue_dependencies(&mut self, enable_issue_dependencies: bool) {
    self.enable_issue_dependencies = Some(enable_issue_dependencies);
  }

  pub fn with_enable_issue_dependencies(mut self, enable_issue_dependencies: bool) -> InternalTracker {
    self.enable_issue_dependencies = Some(enable_issue_dependencies);
    self
  }

  pub fn enable_issue_dependencies(&self) -> Option<&bool> {
    self.enable_issue_dependencies.as_ref()
  }

  pub fn reset_enable_issue_dependencies(&mut self) {
    self.enable_issue_dependencies = None;
  }

  pub fn set_enable_time_tracker(&mut self, enable_time_tracker: bool) {
    self.enable_time_tracker = Some(enable_time_tracker);
  }

  pub fn with_enable_time_tracker(mut self, enable_time_tracker: bool) -> InternalTracker {
    self.enable_time_tracker = Some(enable_time_tracker);
    self
  }

  pub fn enable_time_tracker(&self) -> Option<&bool> {
    self.enable_time_tracker.as_ref()
  }

  pub fn reset_enable_time_tracker(&mut self) {
    self.enable_time_tracker = None;
  }

}



