/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GitTreeResponse : GitTreeResponse returns a git tree

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GitTreeResponse {
  #[serde(rename = "page")]
  page: Option<i64>,
  #[serde(rename = "sha")]
  sha: Option<String>,
  #[serde(rename = "total_count")]
  total_count: Option<i64>,
  #[serde(rename = "tree")]
  tree: Option<Vec<::models::GitEntry>>,
  #[serde(rename = "truncated")]
  truncated: Option<bool>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl GitTreeResponse {
  /// GitTreeResponse returns a git tree
  pub fn new() -> GitTreeResponse {
    GitTreeResponse {
      page: None,
      sha: None,
      total_count: None,
      tree: None,
      truncated: None,
      url: None
    }
  }

  pub fn set_page(&mut self, page: i64) {
    self.page = Some(page);
  }

  pub fn with_page(mut self, page: i64) -> GitTreeResponse {
    self.page = Some(page);
    self
  }

  pub fn page(&self) -> Option<&i64> {
    self.page.as_ref()
  }

  pub fn reset_page(&mut self) {
    self.page = None;
  }

  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> GitTreeResponse {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

  pub fn set_total_count(&mut self, total_count: i64) {
    self.total_count = Some(total_count);
  }

  pub fn with_total_count(mut self, total_count: i64) -> GitTreeResponse {
    self.total_count = Some(total_count);
    self
  }

  pub fn total_count(&self) -> Option<&i64> {
    self.total_count.as_ref()
  }

  pub fn reset_total_count(&mut self) {
    self.total_count = None;
  }

  pub fn set_tree(&mut self, tree: Vec<::models::GitEntry>) {
    self.tree = Some(tree);
  }

  pub fn with_tree(mut self, tree: Vec<::models::GitEntry>) -> GitTreeResponse {
    self.tree = Some(tree);
    self
  }

  pub fn tree(&self) -> Option<&Vec<::models::GitEntry>> {
    self.tree.as_ref()
  }

  pub fn reset_tree(&mut self) {
    self.tree = None;
  }

  pub fn set_truncated(&mut self, truncated: bool) {
    self.truncated = Some(truncated);
  }

  pub fn with_truncated(mut self, truncated: bool) -> GitTreeResponse {
    self.truncated = Some(truncated);
    self
  }

  pub fn truncated(&self) -> Option<&bool> {
    self.truncated.as_ref()
  }

  pub fn reset_truncated(&mut self) {
    self.truncated = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> GitTreeResponse {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



