/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateStatusOption : CreateStatusOption holds the information needed to create a new CommitStatus for a Commit

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateStatusOption {
  #[serde(rename = "context")]
  context: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "state")]
  state: Option<::models::CommitStatusState>,
  #[serde(rename = "target_url")]
  target_url: Option<String>
}

impl CreateStatusOption {
  /// CreateStatusOption holds the information needed to create a new CommitStatus for a Commit
  pub fn new() -> CreateStatusOption {
    CreateStatusOption {
      context: None,
      description: None,
      state: None,
      target_url: None
    }
  }

  pub fn set_context(&mut self, context: String) {
    self.context = Some(context);
  }

  pub fn with_context(mut self, context: String) -> CreateStatusOption {
    self.context = Some(context);
    self
  }

  pub fn context(&self) -> Option<&String> {
    self.context.as_ref()
  }

  pub fn reset_context(&mut self) {
    self.context = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> CreateStatusOption {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_state(&mut self, state: ::models::CommitStatusState) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: ::models::CommitStatusState) -> CreateStatusOption {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&::models::CommitStatusState> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_target_url(&mut self, target_url: String) {
    self.target_url = Some(target_url);
  }

  pub fn with_target_url(mut self, target_url: String) -> CreateStatusOption {
    self.target_url = Some(target_url);
    self
  }

  pub fn target_url(&self) -> Option<&String> {
    self.target_url.as_ref()
  }

  pub fn reset_target_url(&mut self) {
    self.target_url = None;
  }

}



