/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TopicResponse : TopicResponse for returning topics

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TopicResponse {
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "repo_count")]
  repo_count: Option<i64>,
  #[serde(rename = "topic_name")]
  topic_name: Option<String>,
  #[serde(rename = "updated")]
  updated: Option<String>
}

impl TopicResponse {
  /// TopicResponse for returning topics
  pub fn new() -> TopicResponse {
    TopicResponse {
      created: None,
      id: None,
      repo_count: None,
      topic_name: None,
      updated: None
    }
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> TopicResponse {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> TopicResponse {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_repo_count(&mut self, repo_count: i64) {
    self.repo_count = Some(repo_count);
  }

  pub fn with_repo_count(mut self, repo_count: i64) -> TopicResponse {
    self.repo_count = Some(repo_count);
    self
  }

  pub fn repo_count(&self) -> Option<&i64> {
    self.repo_count.as_ref()
  }

  pub fn reset_repo_count(&mut self) {
    self.repo_count = None;
  }

  pub fn set_topic_name(&mut self, topic_name: String) {
    self.topic_name = Some(topic_name);
  }

  pub fn with_topic_name(mut self, topic_name: String) -> TopicResponse {
    self.topic_name = Some(topic_name);
    self
  }

  pub fn topic_name(&self) -> Option<&String> {
    self.topic_name.as_ref()
  }

  pub fn reset_topic_name(&mut self) {
    self.topic_name = None;
  }

  pub fn set_updated(&mut self, updated: String) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: String) -> TopicResponse {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&String> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

}



