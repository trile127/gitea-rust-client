/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// WikiCommitList : WikiCommitList commit/revision list

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct WikiCommitList {
  #[serde(rename = "commits")]
  commits: Option<Vec<::models::WikiCommit>>,
  #[serde(rename = "count")]
  count: Option<i64>
}

impl WikiCommitList {
  /// WikiCommitList commit/revision list
  pub fn new() -> WikiCommitList {
    WikiCommitList {
      commits: None,
      count: None
    }
  }

  pub fn set_commits(&mut self, commits: Vec<::models::WikiCommit>) {
    self.commits = Some(commits);
  }

  pub fn with_commits(mut self, commits: Vec<::models::WikiCommit>) -> WikiCommitList {
    self.commits = Some(commits);
    self
  }

  pub fn commits(&self) -> Option<&Vec<::models::WikiCommit>> {
    self.commits.as_ref()
  }

  pub fn reset_commits(&mut self) {
    self.commits = None;
  }

  pub fn set_count(&mut self, count: i64) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i64) -> WikiCommitList {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i64> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

}



