/* 
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrganizationPermissions : OrganizationPermissions list different users permissions on an organization

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrganizationPermissions {
  #[serde(rename = "can_create_repository")]
  can_create_repository: Option<bool>,
  #[serde(rename = "can_read")]
  can_read: Option<bool>,
  #[serde(rename = "can_write")]
  can_write: Option<bool>,
  #[serde(rename = "is_admin")]
  is_admin: Option<bool>,
  #[serde(rename = "is_owner")]
  is_owner: Option<bool>
}

impl OrganizationPermissions {
  /// OrganizationPermissions list different users permissions on an organization
  pub fn new() -> OrganizationPermissions {
    OrganizationPermissions {
      can_create_repository: None,
      can_read: None,
      can_write: None,
      is_admin: None,
      is_owner: None
    }
  }

  pub fn set_can_create_repository(&mut self, can_create_repository: bool) {
    self.can_create_repository = Some(can_create_repository);
  }

  pub fn with_can_create_repository(mut self, can_create_repository: bool) -> OrganizationPermissions {
    self.can_create_repository = Some(can_create_repository);
    self
  }

  pub fn can_create_repository(&self) -> Option<&bool> {
    self.can_create_repository.as_ref()
  }

  pub fn reset_can_create_repository(&mut self) {
    self.can_create_repository = None;
  }

  pub fn set_can_read(&mut self, can_read: bool) {
    self.can_read = Some(can_read);
  }

  pub fn with_can_read(mut self, can_read: bool) -> OrganizationPermissions {
    self.can_read = Some(can_read);
    self
  }

  pub fn can_read(&self) -> Option<&bool> {
    self.can_read.as_ref()
  }

  pub fn reset_can_read(&mut self) {
    self.can_read = None;
  }

  pub fn set_can_write(&mut self, can_write: bool) {
    self.can_write = Some(can_write);
  }

  pub fn with_can_write(mut self, can_write: bool) -> OrganizationPermissions {
    self.can_write = Some(can_write);
    self
  }

  pub fn can_write(&self) -> Option<&bool> {
    self.can_write.as_ref()
  }

  pub fn reset_can_write(&mut self) {
    self.can_write = None;
  }

  pub fn set_is_admin(&mut self, is_admin: bool) {
    self.is_admin = Some(is_admin);
  }

  pub fn with_is_admin(mut self, is_admin: bool) -> OrganizationPermissions {
    self.is_admin = Some(is_admin);
    self
  }

  pub fn is_admin(&self) -> Option<&bool> {
    self.is_admin.as_ref()
  }

  pub fn reset_is_admin(&mut self) {
    self.is_admin = None;
  }

  pub fn set_is_owner(&mut self, is_owner: bool) {
    self.is_owner = Some(is_owner);
  }

  pub fn with_is_owner(mut self, is_owner: bool) -> OrganizationPermissions {
    self.is_owner = Some(is_owner);
    self
  }

  pub fn is_owner(&self) -> Option<&bool> {
    self.is_owner.as_ref()
  }

  pub fn reset_is_owner(&mut self) {
    self.is_owner = None;
  }

}



